options{
STATIC = false;
DEBUG_LOOKAHEAD = false;
IGNORE_CASE = true;
}

PARSER_BEGIN(grapq)

package gramatica_paquete;
import pr1compilarodores2.Nodo;
import java.io.*;
import java.util.*;

public class grapq
{
    public static int contador;
    public static void main( String[] args )throws ParseException
    {
            System.out.println("analisis correcto");        
    }
}
PARSER_END(grapq)

TOKEN_MGR_DECLS : {
     Token tok;
}
SKIP : 
{ 
	" "|"\n" | "\r" | "\r\n" | "\t"
        | "\u201c"
}


   TOKEN :
{
      < Validar: "\"validar\"" >
    | < Login: "\"login\"">
    | < Paquete: "\"paquete\"">
    | < Fin: "\"fin\"">
    | < Error: "\"error\"">
    | < Tipo: "\"tipo\"">
    | < Msg: "\"msg\"">
    | < Datos: "\"datos\"">
    | < Lexico: "\"lexico\"">
    | < Archivo: "\"archivo\"">
    | < Col: "\"col\"">
    | < Fila: "\"Fila\"">
    | < Instruccion: "\"instruccion\"">
    | < Reporte: "\"reporte\"">
    | < Usql: "\"usql\""> 
    | < Comando: "\"Comando\""> 
    | < Lenguaje: "\"Lenguaje\"">
}

TOKEN :
{
      <Usuario: "seleccionar * de usuarios donde usuario =">  
    | <Pass: "password">
}
TOKEN :
{
        <Num: ((["0"-"9"])+("."(["0"-"9"])+)?)>
       | <Id: (["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)>
}

TOKEN :
{
      <Pai: "(">
    | <Paf: ")">
    | <Pt: ";">
    | <Cm: ",">
    | <Lli: "{">
    | <Llf: "}">
    | <Flecha : "=>">
    | <Igual : "=">
    | <Pp : ":">
    | <Cii : "<<">
    | <Cif : ">>">
    | <punto: ".">
    | <Coi: "[" >
    | <Cof: "]" >
    | <Comi: "'">
    | <Comilla: "\"">
    | <And: "&&">
}


TOKEN :
{
     < Sql:
      "%"
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "%"
  >
}

TOKEN :
{
     < Texto:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}


//**********************************************************************************************Inicio

//<Coi> <Validar> <Pp> <Num> <Cm> paquete() <Cof>

Nodo inicio(Nodo raiz):
{
    Token t1;
}{
   <Coi> { Nodo tmp = new Nodo("paquete");
           tmp.setNumNodo(grapq.contador++);
           raiz = tmp; }
   <Validar> <Pp> t1=<Num> { raiz.setValor(t1.image); }
   <Cm> raiz=paquete(raiz) <Cof> { return raiz; }
}

 //<Login> <Pp> <Coi> <Comando> <Flecha> login() <Cof> 
//<Paquete> <Pp> tipopaquete() { return raiz; }

Nodo paquete(Nodo raiz):
{
    Nodo nodo1;
}{
     <Login> <Pp> <Coi> <Comando> 
           { Nodo tmp = new Nodo("login");
             tmp.setNumNodo(grapq.contador++);
             nodo1 = tmp; }
    <Flecha> nodo1=login(nodo1) 
    <Cof> {    raiz.addHijo(nodo1);
               return raiz; }

    | <Paquete> <Pp> raiz=tipopaquete(raiz) { return raiz; }
}


Nodo login(Nodo hijo):
{
    Token t1;
    Nodo nodo1;
}
{
     <Comilla>  <Usuario> { Nodo tmp = new Nodo("usuario");
                              tmp.setNumNodo(grapq.contador++);
                              nodo1= tmp; } 
     <Comi>     t1=<Id> { nodo1.setNombre(t1.image); } 
     <Comi> <And> <Pass> <Flecha> <Comi>
     t1=<Id> { nodo1.setValor(t1.image); } <Comi> { hijo.addHijo(nodo1); }
    <Comilla> { return hijo; }
}

//<Error> <Cm> error()
//<Usql> <Cm> usql() 
//<Reporte> <Cm> reporte()

Nodo tipopaquete(Nodo raiz):
{
    Nodo nodo1;
}
{
      <Fin> { Nodo tmp = new Nodo("fin");
              tmp.setNumNodo(grapq.contador++);
              nodo1 = tmp;
              raiz.addHijo(nodo1); 
              return raiz; }

    | <Error> <Cm> error() { return raiz; }

    | <Usql> { Nodo tmp = new Nodo("usql");
               tmp.setNumNodo(grapq.contador++);
               nodo1 = tmp; }
      <Cm> nodo1=usql(nodo1) {  raiz.addHijo(nodo1);
                                      return raiz; }

    | <Reporte> <Cm> reporte() { return raiz; }
}

void error():
{}
{
    <Tipo> <Pp> tipoerror() 
}

void tipoerror():
{}
{
    <Lenguaje> <Cm> <Msg> <Pp> <Texto> <Cm> <Datos> <Pp> <Coi> datos() <Cof>
}

void datos():
{}
{
   <Error> <Pp> gramatica() <Cm> <Archivo> <Pp> <Sql> <Cm> <Col> <Pp> <Num> <Cm> <Fila> <Pp> <Num>
}

void gramatica():
{}
{
    <Lexico> 
}

Nodo usql(Nodo hijo):
{
    Token t1;
}
{
    <Instruccion> <Pp> t1=<Sql> <Cm> { return hijo; }
} 

void reporte():
{}
{
    <Instruccion> <Pp> <Sql> <Cm>
}






