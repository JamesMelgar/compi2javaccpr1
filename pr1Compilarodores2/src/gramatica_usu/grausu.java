/* grausu.java */
/* Generated By:JavaCC: Do not edit this line. grausu.java */
package gramatica_usu;
import pr1compilarodores2.Nodo;
import java.io.*;
import java.util.*;

public class grausu implements grausuConstants {
    public static int contador=5000;
    public static void main( String[] args )throws ParseException
    {
            System.out.println("analisis correcto");
    }

//*********************************************************************************************INICIO
  final public 
Nodo inicio(Nodo raiz) throws ParseException {
    jj_consume_token(Simbolo);
    raiz = instrucciones(raiz);
    jj_consume_token(Simbolo);
    jj_consume_token(0);
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo instrucciones(Nodo raiz) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Crear:{
      raiz = crear(raiz);
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Usar:{
      raiz = usar(raiz);
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Alterar:{
      jj_consume_token(Alterar);
      alterar();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Eliminar:{
      jj_consume_token(Eliminar);
      eliminar();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Insertar:{
      jj_consume_token(Insertar);
      insertar();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case BackupU:{
      jj_consume_token(BackupU);
      backupu();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case BackupC:{
      jj_consume_token(BackupC);
      backupc();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case RestaU:{
      jj_consume_token(RestaU);
      restau();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case RestaC:{
      jj_consume_token(RestaC);
      restac();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Actualizar:{
      jj_consume_token(Actualizar);
      jj_consume_token(Tabla);
      actualizar();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Borrar:{
      jj_consume_token(Borrar);
      jj_consume_token(En);
      jj_consume_token(Tabla);
      borrar();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Seleccionar:{
      jj_consume_token(Seleccionar);
      seleccionar();
      pt();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Contar:{
      jj_consume_token(Contar);
      contar();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Otorgar:{
      jj_consume_token(Otorgar);
      otorgar();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Denegar:{
      jj_consume_token(Denegar);
      denegar();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
{if ("" != null) return raiz;}
    }
    throw new Error("Missing return statement in function");
  }

//*********************************************************************************Instruccion CREAR
  final public 
Nodo crear(Nodo raiz) throws ParseException {Nodo nodo1;
    jj_consume_token(Crear);
Nodo tmp = new Nodo("crear");
              tmp.setNumNodo(grausu.contador++);
              tmp.setValor("");
              nodo1 = tmp;
    nodo1 = tipocrear(nodo1);
raiz.addHijo(nodo1); {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

/*
 <BaseD> crearbase() 
|<Tabla> creartabla()
|<Objeto> crearobjeto()
|<Procedimiento> crearproce()
|<Funcion> crearfuncion()
|<Usuario> crearusuario()
*/
  final public 
Nodo tipocrear(Nodo hijo) throws ParseException {Nodo nodo1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BaseD:{
      jj_consume_token(BaseD);
hijo.setNombre("crear base");
      hijo = crearbase(hijo);
{if ("" != null) return hijo;}
      break;
      }
    case Tabla:{
      jj_consume_token(Tabla);
      creartabla();
{if ("" != null) return hijo;}
      break;
      }
    case Objeto:{
      jj_consume_token(Objeto);
      crearobjeto();
{if ("" != null) return hijo;}
      break;
      }
    case Procedimiento:{
      jj_consume_token(Procedimiento);
      crearproce();
{if ("" != null) return hijo;}
      break;
      }
    case Funcion:{
      jj_consume_token(Funcion);
      crearfuncion();
{if ("" != null) return hijo;}
      break;
      }
    case Usuario:{
      jj_consume_token(Usuario);
hijo.setNombre("crear usuario");
      hijo = crearusuario(hijo);
{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo crearbase(Nodo hijo) throws ParseException {Nodo nodo1;
    Token t1;
    t1 = jj_consume_token(Id);
Nodo tmp = new Nodo(t1.image);
              tmp.setNumNodo(grausu.contador++);
              tmp.setColumna(t1.beginColumn);
              tmp.setFila(t1.beginLine);
              nodo1 = tmp;
    pt();
hijo.addHijo(nodo1);
           {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public void creartabla() throws ParseException {
    jj_consume_token(Id);
    jj_consume_token(Pai);
    creaparametros();
    jj_consume_token(Paf);
    pt();
  }

  final public void crearobjeto() throws ParseException {
    jj_consume_token(Id);
    jj_consume_token(Pai);
    creaparametros();
    jj_consume_token(Paf);
    pt();
  }

  final public void creaparametros() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Text:
    case Integer:
    case Double:
    case Bool:
    case TDate:
    case TDateT:
    case Id:{
      tipodato();
      jj_consume_token(Id);
      complemento();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void complemento() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Nulo:{
      jj_consume_token(Nulo);
      complemento();
      break;
      }
    case NoNulo:{
      jj_consume_token(NoNulo);
      complemento();
      break;
      }
    case AutoI:{
      jj_consume_token(AutoI);
      complemento();
      break;
      }
    case LlaveP:{
      jj_consume_token(LlaveP);
      complemento();
      break;
      }
    case LlaveF:{
      jj_consume_token(LlaveF);
      jj_consume_token(Id);
      break;
      }
    case Cm:{
      jj_consume_token(Cm);
      creaparametros();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void tipodato() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Text:{
      jj_consume_token(Text);
      break;
      }
    case Integer:{
      jj_consume_token(Integer);
      break;
      }
    case Double:{
      jj_consume_token(Double);
      break;
      }
    case Bool:{
      jj_consume_token(Bool);
      break;
      }
    case TDate:{
      jj_consume_token(TDate);
      break;
      }
    case TDateT:{
      jj_consume_token(TDateT);
      break;
      }
    case Id:{
      jj_consume_token(Id);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//*****************************************************************Crear Procedimiento
  final public void crearproce() throws ParseException {
    jj_consume_token(Id);
    jj_consume_token(Pai);
    paraproce();
    jj_consume_token(Paf);
    jj_consume_token(Lli);
    proceconte();
    llf();
  }

  final public void paraproce() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Text:
    case Integer:
    case Double:
    case Bool:
    case TDate:
    case TDateT:
    case Id:{
      tipodato();
      jj_consume_token(Aid);
      cmproce();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void cmproce() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      paraproce();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void proceconte() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Alterar:{
      jj_consume_token(Alterar);
      alterar();
      proceconte();
      break;
      }
    case Eliminar:{
      jj_consume_token(Eliminar);
      eliminar();
      proceconte();
      break;
      }
    case Insertar:{
      jj_consume_token(Insertar);
      insertar();
      proceconte();
      break;
      }
    case BackupU:{
      jj_consume_token(BackupU);
      backupu();
      proceconte();
      break;
      }
    case BackupC:{
      jj_consume_token(BackupC);
      backupc();
      proceconte();
      break;
      }
    case RestaU:{
      jj_consume_token(RestaU);
      restau();
      proceconte();
      break;
      }
    case RestaC:{
      jj_consume_token(RestaC);
      restac();
      proceconte();
      break;
      }
    case Actualizar:{
      jj_consume_token(Actualizar);
      jj_consume_token(Tabla);
      actualizar();
      proceconte();
      break;
      }
    case Borrar:{
      jj_consume_token(Borrar);
      jj_consume_token(En);
      jj_consume_token(Tabla);
      borrar();
      proceconte();
      break;
      }
    case Seleccionar:{
      jj_consume_token(Seleccionar);
      seleccionar();
      pt();
      proceconte();
      break;
      }
    case Otorgar:{
      jj_consume_token(Otorgar);
      otorgar();
      proceconte();
      break;
      }
    case Denegar:{
      jj_consume_token(Denegar);
      denegar();
      proceconte();
      break;
      }
    case Aidp:
    case Aid:{
      llamadafuncion();
      pt();
      proceconte();
      break;
      }
    case Id:{
      llamadametodo();
      pt();
      proceconte();
      break;
      }
    case Declarar:{
      jj_consume_token(Declarar);
      declarar();
      pt();
      proceconte();
      break;
      }
    case Retorno:{
      jj_consume_token(Retorno);
      retorno();
      pt();
      proceconte();
      break;
      }
    case Si:{
      jj_consume_token(Si);
      si();
      proceconte();
      break;
      }
    case Selec:{
      jj_consume_token(Selec);
      selecciona();
      proceconte();
      break;
      }
    case Para:{
      jj_consume_token(Para);
      para();
      proceconte();
      break;
      }
    case Mientras:{
      jj_consume_token(Mientras);
      mientras();
      proceconte();
      break;
      }
    case Imprimir:{
      jj_consume_token(Imprimir);
      imprimir();
      proceconte();
      break;
      }
    case Detener:{
      jj_consume_token(Detener);
      detener();
      proceconte();
      break;
      }
    case Contar:{
      jj_consume_token(Contar);
      contar();
      proceconte();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void llamadafuncion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Aid:{
      jj_consume_token(Aid);
      jj_consume_token(Igual);
      s0();
      break;
      }
    case Aidp:{
      jj_consume_token(Aidp);
      jj_consume_token(Igual);
      s0();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void llamadametodo() throws ParseException {
    jj_consume_token(Id);
    jj_consume_token(Pai);
    tipo();
    listavalores();
    jj_consume_token(Paf);
  }

  final public void declarar() throws ParseException {
    jj_consume_token(Aid);
    listavariable();
    tipodato();
    expresion();
  }

  final public void expresion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Igual:{
      jj_consume_token(Igual);
      s0();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void listavariable() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      jj_consume_token(Aid);
      listavariable();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void crearfuncion() throws ParseException {
    jj_consume_token(Id);
    jj_consume_token(Pai);
    paraproce();
    jj_consume_token(Paf);
    jj_consume_token(Lli);
    llf();
  }

  final public void pt() throws ParseException {
    try {
      jj_consume_token(Pt);
    } catch (ParseException x) {
System.out.println(x.toString());
                Token t;
                do {
                        t = getNextToken();
        } while (t.kind != Pt);
    }
  }

  final public void llf() throws ParseException {
    try {
      jj_consume_token(Llf);
    } catch (ParseException x) {
System.out.println(x.toString());
                Token t;
                do {
                        t = getNextToken();
        } while (t.kind != Llf);
    }
  }

//************************************************************************************Usuario
  final public Nodo crearusuario(Nodo hijo) throws ParseException {Nodo nodo1;
    Token t1;
    t1 = jj_consume_token(Id);
Nodo tmp = new Nodo(t1.image);
             tmp.setNumNodo(grausu.contador++);
             tmp.setColumna(t1.beginColumn);
             tmp.setFila(t1.beginLine);
             nodo1 = tmp;
    jj_consume_token(Colocar);
    jj_consume_token(Pass);
    jj_consume_token(Igual);
    t1 = jj_consume_token(Texto);
nodo1.setValor(t1.image);
    pt();
hijo.addHijo(nodo1);
            {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

//**************************************************************************INSTRUCCION USAR
  final public 
Nodo usar(Nodo raiz) throws ParseException {Nodo nodo1;
    Token t1;
    jj_consume_token(Usar);
    t1 = jj_consume_token(Id);
Nodo tmp = new Nodo("usar");
                     tmp.setNumNodo(grausu.contador++);
                     tmp.setValor(t1.image);
                     tmp.setColumna(t1.beginColumn);
                     tmp.setFila(t1.beginLine);
                     nodo1 = tmp;
    pt();
raiz.addHijo(nodo1); {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

//**************************************************************************RETORNO
  final public 
void retorno() throws ParseException {
    s0();
  }

//****************************************************************************INSTRUCCION ALTERAR
  final public 
void alterar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Tabla:{
      jj_consume_token(Tabla);
      jj_consume_token(Id);
      tablaalt();
      break;
      }
    case Objeto:{
      jj_consume_token(Objeto);
      jj_consume_token(Id);
      objalt();
      break;
      }
    case Usuario:{
      jj_consume_token(Usuario);
      jj_consume_token(Id);
      usualt();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void tablaalt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Agregar:{
      jj_consume_token(Agregar);
      jj_consume_token(Pai);
      tipodato();
      jj_consume_token(Id);
      compoalt();
      setablaalt();
      jj_consume_token(Paf);
      pt();
      break;
      }
    case Quitar:{
      jj_consume_token(Quitar);
      jj_consume_token(Id);
      quitarseg();
      pt();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void quitarseg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      jj_consume_token(Id);
      quitarseg();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void setablaalt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      tipodato();
      jj_consume_token(Id);
      compoalt();
      setablaalt();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void compoalt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Nulo:{
      jj_consume_token(Nulo);
      compoalt();
      break;
      }
    case NoNulo:{
      jj_consume_token(NoNulo);
      compoalt();
      break;
      }
    case AutoI:{
      jj_consume_token(AutoI);
      compoalt();
      break;
      }
    case LlaveP:{
      jj_consume_token(LlaveP);
      compoalt();
      break;
      }
    case LlaveF:{
      jj_consume_token(LlaveF);
      jj_consume_token(Id);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void objalt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Agregar:{
      jj_consume_token(Agregar);
      jj_consume_token(Pai);
      tipodato();
      jj_consume_token(Id);
      segobjalt();
      jj_consume_token(Paf);
      pt();
      break;
      }
    case Quitar:{
      jj_consume_token(Quitar);
      jj_consume_token(Id);
      quitarseg();
      pt();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void segobjalt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      tipodato();
      jj_consume_token(Id);
      compoalt();
      segobjalt();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void usualt() throws ParseException {
    jj_consume_token(Cambiar);
    jj_consume_token(Pass);
    jj_consume_token(Igual);
    jj_consume_token(Texto);
    pt();
  }

//*****************************************************************************Instruccion Eliminar
  final public 
void eliminar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Tabla:{
      jj_consume_token(Tabla);
      jj_consume_token(Id);
      pt();
      break;
      }
    case BaseD:{
      jj_consume_token(BaseD);
      jj_consume_token(Id);
      pt();
      break;
      }
    case Objeto:{
      jj_consume_token(Objeto);
      jj_consume_token(Id);
      pt();
      break;
      }
    case Usuario:{
      jj_consume_token(Usuario);
      jj_consume_token(Id);
      pt();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//*******************************************************************************Instruccion insertar
  final public 
void insertar() throws ParseException {
    jj_consume_token(En);
    jj_consume_token(Tabla);
    jj_consume_token(Id);
    jj_consume_token(Pai);
    tipo();
    listavalores();
    jj_consume_token(Paf);
    especial();
    pt();
  }

  final public void listavalores() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      tipo();
      listavalores();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Id:{
      jj_consume_token(Id);
      break;
      }
    case Idp:{
      jj_consume_token(Idp);
      break;
      }
    case Aidp:{
      jj_consume_token(Aidp);
      break;
      }
    case Aid:{
      jj_consume_token(Aid);
      break;
      }
    case Bo:{
      jj_consume_token(Bo);
      break;
      }
    case Num:{
      jj_consume_token(Num);
      break;
      }
    case Dou:{
      jj_consume_token(Dou);
      break;
      }
    case Texto:{
      jj_consume_token(Texto);
      break;
      }
    case Date:{
      jj_consume_token(Date);
      break;
      }
    case Datetime:{
      jj_consume_token(Datetime);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void especial() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Valores:{
      jj_consume_token(Valores);
      jj_consume_token(Pai);
      tipo();
      listavalores();
      jj_consume_token(Paf);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
{if ("" != null) return;}
    }
  }

//***********************************************************************BACKUP y Restaurar
  final public 
void backupu() throws ParseException {
    jj_consume_token(Id);
    jj_consume_token(Id);
    pt();
  }

  final public void backupc() throws ParseException {
    jj_consume_token(Id);
    jj_consume_token(Id);
    pt();
  }

  final public void restau() throws ParseException {
    jj_consume_token(RutaU);
    pt();
  }

  final public void restac() throws ParseException {
    jj_consume_token(RutaZ);
    pt();
  }

//************************************************************************** Instruccion ACTUALIZAR
  final public 
void actualizar() throws ParseException {
    jj_consume_token(Id);
    jj_consume_token(Pai);
    tipoac();
    listavaloresac();
    jj_consume_token(Paf);
    especialac();
    where();
    pt();
  }

  final public void listavaloresac() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      tipoac();
      listavaloresac();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void tipoac() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Id:{
      jj_consume_token(Id);
      break;
      }
    case Idp:{
      jj_consume_token(Idp);
      break;
      }
    case Aidp:{
      jj_consume_token(Aidp);
      break;
      }
    case Aid:{
      jj_consume_token(Aid);
      break;
      }
    case Bo:{
      jj_consume_token(Bo);
      break;
      }
    case Num:{
      jj_consume_token(Num);
      break;
      }
    case Dou:{
      jj_consume_token(Dou);
      break;
      }
    case Texto:{
      jj_consume_token(Texto);
      break;
      }
    case Date:{
      jj_consume_token(Date);
      break;
      }
    case Datetime:{
      jj_consume_token(Datetime);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void especialac() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Valores:{
      jj_consume_token(Valores);
      jj_consume_token(Pai);
      s0();
      jj_consume_token(Paf);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void livalores() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      s0();
      livalores();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void where() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Donde:{
      jj_consume_token(Donde);
      s0();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
{if ("" != null) return;}
    }
  }

//************************************************************************ INSTRUCCION BORRAR
  final public 
void borrar() throws ParseException {
    jj_consume_token(Id);
    where();
    pt();
  }

//************************************************************************ INSTRUCCION SELECCIONAR
  final public 
void seleccionar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Id:{
      jj_consume_token(Id);
      listids();
      jj_consume_token(De);
      jj_consume_token(Id);
      listids();
      where();
      orden();
      break;
      }
    case Mult:{
      jj_consume_token(Mult);
      jj_consume_token(De);
      jj_consume_token(Id);
      listids();
      where();
      orden();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void orden() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OrdenP:{
      jj_consume_token(OrdenP);
      idorden();
      tipoorden();
      break;
      }
    default:
      jj_la1[28] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void idorden() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Id:{
      jj_consume_token(Id);
      break;
      }
    case Idp:{
      jj_consume_token(Idp);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void listids() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      jj_consume_token(Id);
      listids();
      break;
      }
    default:
      jj_la1[30] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void tipoorden() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Asc:{
      jj_consume_token(Asc);
      break;
      }
    case Desc:{
      jj_consume_token(Desc);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//************************************************************************ operaciones
  final public 
void s0() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Not:{
      jj_consume_token(Not);
      s1();
      break;
      }
    case Fecha:
    case FechaH:
    case Id:
    case Idp:
    case Tid:
    case Aidp:
    case Aid:
    case Taid:
    case Bo:
    case Num:
    case Dou:
    case Date:
    case Datetime:
    case Resta:
    case Pai:
    case Texto:{
      s1();
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void s1() throws ParseException {
    s2();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case And:{
        ;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        break label_1;
      }
      jj_consume_token(And);
      s2();
    }
  }

  final public void s2() throws ParseException {
    s3();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Or:{
        ;
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        break label_2;
      }
      jj_consume_token(Or);
      s3();
    }
  }

  final public void s3() throws ParseException {
    s4();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Iguales:
      case Dife:
      case Menorq:
      case Mayorq:
      case Menori:
      case Mayori:{
        ;
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Iguales:{
        jj_consume_token(Iguales);
        break;
        }
      case Dife:{
        jj_consume_token(Dife);
        break;
        }
      case Mayorq:{
        jj_consume_token(Mayorq);
        break;
        }
      case Menorq:{
        jj_consume_token(Menorq);
        break;
        }
      case Mayori:{
        jj_consume_token(Mayori);
        break;
        }
      case Menori:{
        jj_consume_token(Menori);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s4();
    }
  }

  final public void s4() throws ParseException {
    s5();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Suma:
      case Resta:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Suma:{
        jj_consume_token(Suma);
        break;
        }
      case Resta:{
        jj_consume_token(Resta);
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s5();
    }
  }

  final public void s5() throws ParseException {
    s6();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Divi:
      case Mult:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Divi:{
        jj_consume_token(Divi);
        break;
        }
      case Mult:{
        jj_consume_token(Mult);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s6();
    }
  }

  final public void s6() throws ParseException {
    s7();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Pote:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_6;
      }
      jj_consume_token(Pote);
      s7();
    }
  }

  final public void s7() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Resta:{
      jj_consume_token(Resta);
      s8();
      break;
      }
    case Fecha:
    case FechaH:
    case Id:
    case Idp:
    case Tid:
    case Aidp:
    case Aid:
    case Taid:
    case Bo:
    case Num:
    case Dou:
    case Date:
    case Datetime:
    case Pai:
    case Texto:{
      s8();
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void s8() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Num:{
      jj_consume_token(Num);
      break;
      }
    case Bo:{
      jj_consume_token(Bo);
      break;
      }
    case Dou:{
      jj_consume_token(Dou);
      break;
      }
    case Texto:{
      jj_consume_token(Texto);
      break;
      }
    case Id:{
      jj_consume_token(Id);
      fun();
      break;
      }
    case Idp:{
      jj_consume_token(Idp);
      break;
      }
    case Tid:{
      jj_consume_token(Tid);
      break;
      }
    case Aid:{
      jj_consume_token(Aid);
      break;
      }
    case Aidp:{
      jj_consume_token(Aidp);
      break;
      }
    case Taid:{
      jj_consume_token(Taid);
      break;
      }
    case Fecha:{
      jj_consume_token(Fecha);
      break;
      }
    case FechaH:{
      jj_consume_token(FechaH);
      break;
      }
    case Datetime:{
      jj_consume_token(Datetime);
      break;
      }
    case Date:{
      jj_consume_token(Date);
      break;
      }
    case Pai:{
      jj_consume_token(Pai);
      s0();
      jj_consume_token(Paf);
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void fun() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Pai:{
      jj_consume_token(Pai);
      funpara();
      s9();
      jj_consume_token(Paf);
      break;
      }
    default:
      jj_la1[44] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void funpara() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Fecha:
    case FechaH:
    case Id:
    case Idp:
    case Tid:
    case Aidp:
    case Aid:
    case Taid:
    case Bo:
    case Num:
    case Dou:
    case Date:
    case Datetime:
    case Resta:
    case Not:
    case Pai:
    case Texto:{
      s0();
      break;
      }
    default:
      jj_la1[45] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void s9() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      s0();
      s9();
      break;
      }
    default:
      jj_la1[46] = jj_gen;
{if ("" != null) return;}
    }
  }

//*************************************************************************************OTORGAR y DENEGAR
  final public 
void otorgar() throws ParseException {
    jj_consume_token(Id);
    jj_consume_token(Cm);
    objetopermiso();
    pt();
  }

  final public void denegar() throws ParseException {
    jj_consume_token(Id);
    jj_consume_token(Cm);
    objetopermiso();
    pt();
  }

  final public void objetopermiso() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Idp:{
      jj_consume_token(Idp);
      break;
      }
    case Id:{
      jj_consume_token(Id);
      jj_consume_token(punto);
      jj_consume_token(Mult);
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//**********************************************************************************Funcion SI()
  final public 
void si() throws ParseException {
    jj_consume_token(Pai);
    s0();
    jj_consume_token(Paf);
    jj_consume_token(Lli);
    proceconte();
    llf();
    sino();
  }

  final public void sino() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Sino:{
      jj_consume_token(Sino);
      jj_consume_token(Lli);
      proceconte();
      llf();
      break;
      }
    default:
      jj_la1[48] = jj_gen;
{if ("" != null) return;}
    }
  }

//*******************************************************************SELECCIONA
  final public 
void selecciona() throws ParseException {
    jj_consume_token(Pai);
    s0();
    jj_consume_token(Paf);
    jj_consume_token(Lli);
    caso();
    llf();
  }

  final public void caso() throws ParseException {
    jj_consume_token(Caso);
    puntual();
    jj_consume_token(Pp);
    proceconte();
    caso2();
  }

  final public void puntual() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Texto:{
      jj_consume_token(Texto);
      break;
      }
    case Bo:{
      jj_consume_token(Bo);
      break;
      }
    case Num:{
      jj_consume_token(Num);
      break;
      }
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void caso2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Caso:{
      jj_consume_token(Caso);
      puntual();
      jj_consume_token(Pp);
      proceconte();
      caso2();
      break;
      }
    case Defecto:{
      jj_consume_token(Defecto);
      jj_consume_token(Pp);
      proceconte();
      caso2();
      break;
      }
    default:
      jj_la1[50] = jj_gen;
{if ("" != null) return;}
    }
  }

//*****************************************************************************Instruccion Para
  final public 
void para() throws ParseException {
    jj_consume_token(Pai);
    pinterno();
    jj_consume_token(Paf);
    jj_consume_token(Lli);
    proceconte();
    llf();
  }

  final public void pinterno() throws ParseException {
    jj_consume_token(Declarar);
    jj_consume_token(Aid);
    jj_consume_token(Igual);
    s0();
    pt();
    s0();
    pt();
    incremento();
  }

  final public void incremento() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Suma:{
      jj_consume_token(Suma);
      jj_consume_token(Suma);
      break;
      }
    case Resta:{
      jj_consume_token(Resta);
      jj_consume_token(Resta);
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//*******************************************************************************Detener()
  final public 
void detener() throws ParseException {
    pt();
  }

//*******************************************************************************Mientras
  final public 
void mientras() throws ParseException {
    jj_consume_token(Pai);
    s0();
    jj_consume_token(Paf);
    jj_consume_token(Lli);
    proceconte();
    llf();
  }

//*******************************************************************************Imprimir
  final public 
void imprimir() throws ParseException {
    jj_consume_token(Pai);
    s0();
    jj_consume_token(Paf);
    pt();
  }

//******************************************************************************CONTAR
  final public 
void contar() throws ParseException {
    jj_consume_token(Pai);
    jj_consume_token(Cii);
    jj_consume_token(Seleccionar);
    seleccionar();
    jj_consume_token(Cif);
    jj_consume_token(Paf);
    pt();
  }

  /** Generated Token Manager. */
  public grausuTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[52];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7bff000,0x0,0x0,0x0,0x0,0x0,0x0,0x1fffc000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x60000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40,0x3e80,0xf8000000,0x0,0xf8000000,0xf8000000,0x0,0x20004f,0x0,0x0,0x0,0x3200,0x30000,0x0,0x0,0x0,0x30000,0x0,0x3280,0x0,0x0,0x100000,0x0,0x0,0x100000,0x0,0x400000,0x0,0x4000000,0x0,0x0,0x1800000,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x30,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x81,0x3e,0x81,0x81,0x0,0xc80,0xc00,0x0,0x0,0x0,0x0,0x0,0x0,0x3e,0x0,0x0,0x0,0x0,0x1f0d80,0x0,0x0,0x1f0d80,0x0,0x0,0x0,0x1000080,0x0,0x180,0x0,0x0,0x5f1f80,0x0,0x0,0xfc000000,0xfc000000,0x600000,0x600000,0x1800000,0x1800000,0x2000000,0x5f1f80,0x1f1f80,0x0,0x5f1f80,0x0,0x180,0x0,0x30000,0x0,0x600000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x80,0x0,0x0,0x80,0x0,0x0,0x400,0x80,0x0,0x0,0x80,0x80,0x0,0x0,0x80,0x0,0x80,0x8000,0x0,0x80,0x8000,0x0,0x80,0x0,0x0,0x0,0x0,0x80,0x0,0x8014,0x1,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8010,0x8010,0x10,0x8014,0x80,0x0,0x0,0x8000,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public grausu(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public grausu(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new grausuTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public grausu(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new grausuTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public grausu(grausuTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(grausuTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[113];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 52; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 113; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
