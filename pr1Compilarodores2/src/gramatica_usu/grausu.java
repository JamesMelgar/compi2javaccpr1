/* grausu.java */
/* Generated By:JavaCC: Do not edit this line. grausu.java */
package gramatica_usu;
import java.io.*;
import java.util.*;

public class grausu implements grausuConstants {
    public static void main( String[] args )throws ParseException
        {
                try
                {
                        grausu analizador = new grausu( System.in ) ;
                        analizador.inicio();
                        System.out.println("analisis correcto");
                }
                catch(ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("Analizador: Se han encontrado errores en el analisis.");
                }
        }

  final public void inicio() throws ParseException {
    instrucciones();
    jj_consume_token(0);
  }

  final public void instrucciones() throws ParseException {
    crear();
  }

//*********************************************************************************Instruccion CREAR
  final public 
void crear() throws ParseException {
    jj_consume_token(Crear);
    tipocrear();
  }

  final public void tipocrear() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BaseD:{
      jj_consume_token(BaseD);
      crearbase();
      break;
      }
    case Tabla:{
      jj_consume_token(Tabla);
      creartabla();
      break;
      }
    case Objeto:{
      jj_consume_token(Objeto);
      crearobjeto();
      break;
      }
    case Procedimiento:{
      jj_consume_token(Procedimiento);
      crearproce();
      break;
      }
    case Funcion:{
      jj_consume_token(Funcion);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void crearbase() throws ParseException {
    jj_consume_token(Id);
    pt();
  }

  final public void creartabla() throws ParseException {
    jj_consume_token(Id);
    jj_consume_token(Pai);
    creaparametros();
    jj_consume_token(Paf);
    pt();
  }

  final public void crearobjeto() throws ParseException {
    jj_consume_token(Id);
    jj_consume_token(Pai);
    creaparametros();
    jj_consume_token(Paf);
    pt();
  }

  final public void creaparametros() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Text:
    case Integer:
    case Double:
    case Bool:
    case TDate:
    case TDateT:
    case Id:{
      tipodato();
      jj_consume_token(Id);
      complemento();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void complemento() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Nulo:{
      jj_consume_token(Nulo);
      complemento();
      break;
      }
    case NoNulo:{
      jj_consume_token(NoNulo);
      complemento();
      break;
      }
    case AutoI:{
      jj_consume_token(AutoI);
      complemento();
      break;
      }
    case LlaveP:{
      jj_consume_token(LlaveP);
      complemento();
      break;
      }
    case LlaveF:{
      jj_consume_token(LlaveF);
      jj_consume_token(Id);
      break;
      }
    case Cm:{
      jj_consume_token(Cm);
      creaparametros();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void tipodato() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Text:{
      jj_consume_token(Text);
      break;
      }
    case Integer:{
      jj_consume_token(Integer);
      break;
      }
    case Double:{
      jj_consume_token(Double);
      break;
      }
    case Bool:{
      jj_consume_token(Bool);
      break;
      }
    case TDate:{
      jj_consume_token(TDate);
      break;
      }
    case TDateT:{
      jj_consume_token(TDateT);
      break;
      }
    case Id:{
      jj_consume_token(Id);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void crearproce() throws ParseException {
    jj_consume_token(Id);
    jj_consume_token(Pai);
    paraproce();
    jj_consume_token(Paf);
    jj_consume_token(Lli);
    jj_consume_token(Llf);
  }

  final public void paraproce() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Text:
    case Integer:
    case Double:
    case Bool:
    case TDate:
    case TDateT:
    case Id:{
      tipodato();
      jj_consume_token(Aid);
      cmproce();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void cmproce() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      paraproce();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
{if ("" != null) return;}
    }
  }

  final public void pt() throws ParseException {
    try {
      jj_consume_token(Pt);
    } catch (ParseException x) {
System.out.println(x.toString());
                Token t;
                do {
                        t = getNextToken();
        } while (t.kind != Pt);
    }
  }

  /** Generated Token Manager. */
  public grausuTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7a00,0x81f8000,0x3e00000,0x81f8000,0x81f8000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x10,0x0,0x0,0x10,};
   }

  /** Constructor with InputStream. */
  public grausu(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public grausu(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new grausuTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public grausu(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new grausuTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public grausu(grausuTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(grausuTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
