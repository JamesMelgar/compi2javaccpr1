/* grausu.java */
/* Generated By:JavaCC: Do not edit this line. grausu.java */
package gramatica_usu;
import pr1compilarodores2.Nodo;
import java.io.*;
import java.util.*;

public class grausu implements grausuConstants {
    public static int contador=20000;
    public static void main( String[] args )throws ParseException
    {
            System.out.println("analisis correcto");
    }

//*********************************************************************************************INICIO
  final public 
Nodo inicio(Nodo raiz) throws ParseException {
    jj_consume_token(Simbolo);
    raiz = nuevo(raiz);
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo nuevo(Nodo raiz) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Dolar:{
      jj_consume_token(Dolar);
      raiz = proceconte(raiz);
      jj_consume_token(Simbolo);
      jj_consume_token(0);
{if ("" != null) return raiz;}
      break;
      }
    case Crear:
    case Usar:
    case Alterar:
    case Eliminar:
    case Insertar:
    case Actualizar:
    case Borrar:
    case Seleccionar:
    case Otorgar:
    case Denegar:
    case Imprimir:
    case Contar:
    case Id:
    case Simbolo:{
      raiz = instrucciones(raiz);
      jj_consume_token(Simbolo);
      jj_consume_token(0);
{if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo instrucciones(Nodo raiz) throws ParseException {Token t1;
    Nodo nodo1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Crear:{
      raiz = crear(raiz);
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Usar:{
      raiz = usar(raiz);
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Alterar:{
      jj_consume_token(Alterar);
      raiz = alterar(raiz);
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Eliminar:{
      jj_consume_token(Eliminar);
      raiz = eliminar(raiz);
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Insertar:{
      jj_consume_token(Insertar);
      raiz = insertar(raiz);
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Otorgar:{
      jj_consume_token(Otorgar);
      raiz = otorgar(raiz);
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Denegar:{
      jj_consume_token(Denegar);
      raiz = denegar(raiz);
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Actualizar:{
      jj_consume_token(Actualizar);
      jj_consume_token(Tabla);
      raiz = actualizar(raiz);
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Borrar:{
      jj_consume_token(Borrar);
      jj_consume_token(En);
      jj_consume_token(Tabla);
      raiz = borrar(raiz);
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Seleccionar:{
      jj_consume_token(Seleccionar);
      raiz = seleccionar(raiz);
      pt();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Contar:{
      jj_consume_token(Contar);
      nodo1 = contar();
raiz.addHijo(nodo1);
      pt();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Imprimir:{
      jj_consume_token(Imprimir);
      raiz = imprimir(raiz);
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    case Id:{
      t1 = jj_consume_token(Id);
      jj_consume_token(Pai);
Nodo tmp = new Nodo("llamada");
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setValor(t1.image);
                      tmp.setColumna(t1.beginColumn);
                      tmp.setFila(t1.beginLine);
                      nodo1 = tmp;
      nodo1 = funpara(nodo1);
      nodo1 = s9(nodo1);
raiz.addHijo(nodo1);
      jj_consume_token(Paf);
      pt();
      raiz = instrucciones(raiz);
{if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
{if ("" != null) return raiz;}
    }
    throw new Error("Missing return statement in function");
  }

//*********************************************************************************Instruccion CREAR
  final public 
Nodo crear(Nodo raiz) throws ParseException {Nodo nodo1;
    jj_consume_token(Crear);
Nodo tmp = new Nodo("crear");
              tmp.setNumNodo(grausu.contador++);
              tmp.setValor("");
              nodo1 = tmp;
    nodo1 = tipocrear(nodo1);
raiz.addHijo(nodo1); {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

/*
 <BaseD> crearbase() 
|<Tabla> creartabla()
|<Objeto> crearobjeto()
|<Procedimiento> crearproce()
|<Funcion> crearfuncion()
|<Usuario> crearusuario()
*/
  final public 
Nodo tipocrear(Nodo hijo) throws ParseException {Nodo nodo1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BaseD:{
      jj_consume_token(BaseD);
hijo.setNombre("crear base");
      hijo = crearbase(hijo);
{if ("" != null) return hijo;}
      break;
      }
    case Tabla:{
      jj_consume_token(Tabla);
hijo.setNombre("crear tabla");
      hijo = creartabla(hijo);
{if ("" != null) return hijo;}
      break;
      }
    case Objeto:{
      jj_consume_token(Objeto);
hijo.setNombre("crear Objeto");
      hijo = crearobjeto(hijo);
{if ("" != null) return hijo;}
      break;
      }
    case Procedimiento:{
      jj_consume_token(Procedimiento);
hijo.setNombre("crear proce");
      hijo = crearproce(hijo);
{if ("" != null) return hijo;}
      break;
      }
    case Funcion:{
      jj_consume_token(Funcion);
hijo.setNombre("crear funcion");
      hijo = crearfuncion(hijo);
{if ("" != null) return hijo;}
      break;
      }
    case Usuario:{
      jj_consume_token(Usuario);
hijo.setNombre("crear usuario");
      hijo = crearusuario(hijo);
{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo crearbase(Nodo hijo) throws ParseException {Nodo nodo1;
    Token t1;
    t1 = jj_consume_token(Id);
Nodo tmp = new Nodo(t1.image);
              tmp.setNumNodo(grausu.contador++);
              tmp.setColumna(t1.beginColumn);
              tmp.setFila(t1.beginLine);
              nodo1 = tmp;
    pt();
hijo.addHijo(nodo1);
           {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo creartabla(Nodo hijo) throws ParseException {Token t1;
    t1 = jj_consume_token(Id);
hijo.setValor(t1.image);
              hijo.setColumna(t1.beginColumn);
              hijo.setFila(t1.beginLine);
    jj_consume_token(Pai);
    hijo = creaparametros(hijo);
    jj_consume_token(Paf);
    pt();
{if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

//t1=<Id> <Pai> creaparametros() <Paf> pt()
  final public Nodo crearobjeto(Nodo hijo) throws ParseException {Token t1;
    t1 = jj_consume_token(Id);
hijo.setValor(t1.image);
              hijo.setColumna(t1.beginColumn);
              hijo.setFila(t1.beginLine);
    jj_consume_token(Pai);
    hijo = creaparametros(hijo);
    jj_consume_token(Paf);
    pt();
{if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

/*
tipodato() <Id> complemento()
| { return; }
*/
  final public 
Nodo creaparametros(Nodo hijo) throws ParseException {Token t1;
  Nodo nodo1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Text:
    case Integer:
    case Double:
    case Bool:
    case TDate:
    case TDateT:
    case Id:{
      nodo1 = tipodato();
      t1 = jj_consume_token(Id);
nodo1.setNombre(t1.image);
                nodo1.setColumna(t1.beginColumn);
                nodo1.setFila(t1.beginLine);
      nodo1 = complemento(nodo1);
hijo.addHijo(nodo1);
      hijo = segparatro(hijo);
{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
{if ("" != null) return hijo;}
    }
    throw new Error("Missing return statement in function");
  }

/*

*/
  final public 
Nodo segparatro(Nodo hijo) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      hijo = creaparametros(hijo);
      hijo = segparatro(hijo);
{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
{if ("" != null) return hijo;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo complemento(Nodo primo) throws ParseException {Nodo nodo1;
    Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Nulo:{
      t1 = jj_consume_token(Nulo);
Nodo tmp = new Nodo("<Nulo>");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp;
                 primo.addHijo(nodo1);
      primo = complemento(primo);
{if ("" != null) return primo;}
      break;
      }
    case NoNulo:{
      t1 = jj_consume_token(NoNulo);
Nodo tmp = new Nodo("<NNulo>");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp;
                 primo.addHijo(nodo1);
      primo = complemento(primo);
{if ("" != null) return primo;}
      break;
      }
    case Unico:{
      t1 = jj_consume_token(Unico);
Nodo tmp = new Nodo("<Unico>");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp;
                 primo.addHijo(nodo1);
      primo = complemento(primo);
{if ("" != null) return primo;}
      break;
      }
    case AutoI:{
      t1 = jj_consume_token(AutoI);
Nodo tmp = new Nodo("<Auto>");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp;
                 primo.addHijo(nodo1);
      primo = complemento(primo);
{if ("" != null) return primo;}
      break;
      }
    case LlaveP:{
      t1 = jj_consume_token(LlaveP);
Nodo tmp = new Nodo("<pk>");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp;
                 primo.addHijo(nodo1);
      primo = complemento(primo);
{if ("" != null) return primo;}
      break;
      }
    case LlaveF:{
      t1 = jj_consume_token(LlaveF);
Nodo tmp = new Nodo("<fk>");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp;
      t1 = jj_consume_token(Id);
nodo1.setValor(t1.image);
      t1 = jj_consume_token(Id);
nodo1.setTipo(t1.image);
                 primo.addHijo(nodo1);
      primo = complemento(primo);
{if ("" != null) return primo;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
{if ("" != null) return primo;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo tipodato() throws ParseException {Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Text:{
      t1 = jj_consume_token(Text);
Nodo tmp = new Nodo(t1.image);
                  tmp.setNumNodo(grausu.contador++);
                  tmp.setTipo("text");
                  {if ("" != null) return tmp;}
      break;
      }
    case Integer:{
      t1 = jj_consume_token(Integer);
Nodo tmp = new Nodo(t1.image);
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setTipo("int");
                      {if ("" != null) return tmp;}
      break;
      }
    case Double:{
      t1 = jj_consume_token(Double);
Nodo tmp = new Nodo(t1.image);
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setTipo("double");
                      {if ("" != null) return tmp;}
      break;
      }
    case Bool:{
      t1 = jj_consume_token(Bool);
Nodo tmp = new Nodo(t1.image);
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setTipo("bool");
                      {if ("" != null) return tmp;}
      break;
      }
    case TDate:{
      t1 = jj_consume_token(TDate);
Nodo tmp = new Nodo(t1.image);
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setTipo("date");
                      {if ("" != null) return tmp;}
      break;
      }
    case TDateT:{
      t1 = jj_consume_token(TDateT);
Nodo tmp = new Nodo(t1.image);
                    tmp.setNumNodo(grausu.contador++);
                    tmp.setTipo("datetime");
                    {if ("" != null) return tmp;}
      break;
      }
    case Id:{
      t1 = jj_consume_token(Id);
Nodo tmp = new Nodo(t1.image);
                tmp.setNumNodo(grausu.contador++);
                tmp.setValor("obj");
                tmp.setTipo(t1.image);
                {if ("" != null) return tmp;}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//*****************************************************************Crear Procedimiento
//nodo1=tipodato() { hijo.setTipo(nodo1.getTipo()); 
  final public Nodo crearfuncion(Nodo hijo) throws ParseException {Token t1;
    Nodo n2;
    Nodo nodo1;
    t1 = jj_consume_token(Id);
hijo.setValor(t1.image);
             hijo.setColumna(t1.beginColumn);
             hijo.setFila(t1.beginLine);
    jj_consume_token(Pai);
Nodo tmp = new Nodo("parametros");
              tmp.setNumNodo(grausu.contador++);
              nodo1 = tmp;
    nodo1 = paraproce(nodo1);
hijo.addHijo(nodo1);
    jj_consume_token(Paf);
    n2 = tipodato();
Nodo tmp1 = new Nodo("sentencias");
                            tmp1.setNumNodo(grausu.contador++);
                             nodo1 = tmp1;
                             hijo.setTipo(n2.getTipo());
    t1 = jj_consume_token(Lli);
    nodo1 = proceconte(nodo1);
nodo1.setColumna(t1.beginLine);
    t1 = jj_consume_token(Llf);
nodo1.setFila(t1.beginLine); hijo.addHijo(nodo1);
                  {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

//<Id> <Pai> paraproce() <Paf> <Lli> proceconte() llf() 
  final public Nodo crearproce(Nodo hijo) throws ParseException {Token t1;
    Nodo nodo1;
    t1 = jj_consume_token(Id);
hijo.setValor(t1.image);
             hijo.setColumna(t1.beginColumn);
             hijo.setFila(t1.beginLine);
    jj_consume_token(Pai);
Nodo tmp = new Nodo("parametros");
              tmp.setNumNodo(grausu.contador++);
              nodo1 = tmp;
    nodo1 = paraproce(nodo1);
hijo.addHijo(nodo1);
    jj_consume_token(Paf);
Nodo tmp1 = new Nodo("sentencias");
             tmp1.setNumNodo(grausu.contador++);
             nodo1 = tmp1;
    t1 = jj_consume_token(Lli);
    nodo1 = proceconte(nodo1);
nodo1.setColumna(t1.beginLine);
    t1 = jj_consume_token(Llf);
nodo1.setFila(t1.beginLine); hijo.addHijo(nodo1);
                  {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo paraproce(Nodo primo) throws ParseException {Nodo nodo1;
   Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Text:
    case Integer:
    case Double:
    case Bool:
    case TDate:
    case TDateT:
    case Id:{
      nodo1 = tipodato();
      t1 = jj_consume_token(Aid);
nodo1.setNombre(t1.image);
                                  nodo1.setColumna(t1.beginColumn);
                                  nodo1.setFila(t1.beginLine);
                                  primo.addHijo(nodo1);
      primo = cmproce(primo);
{if ("" != null) return primo;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
{if ("" != null) return primo;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo cmproce(Nodo primo) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      primo = paraproce(primo);
{if ("" != null) return primo;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
{if ("" != null) return primo;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo proceconte(Nodo padre) throws ParseException {Token t1;
    Nodo nodo1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Alterar:{
      jj_consume_token(Alterar);
      padre = alterar(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Eliminar:{
      jj_consume_token(Eliminar);
      padre = eliminar(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Insertar:{
      jj_consume_token(Insertar);
      padre = insertar(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Aidp:
    case Aid:{
      padre = asignar(padre);
      pt();
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Declarar:{
      jj_consume_token(Declarar);
      padre = declarar(padre);
      pt();
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Otorgar:{
      jj_consume_token(Otorgar);
      padre = otorgar(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Denegar:{
      jj_consume_token(Denegar);
      padre = denegar(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Actualizar:{
      jj_consume_token(Actualizar);
      jj_consume_token(Tabla);
      padre = actualizar(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Retorno:{
      jj_consume_token(Retorno);
      padre = retorno(padre);
      pt();
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Borrar:{
      jj_consume_token(Borrar);
      jj_consume_token(En);
      jj_consume_token(Tabla);
      padre = borrar(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Seleccionar:{
      jj_consume_token(Seleccionar);
      padre = seleccionar(padre);
      pt();
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Contar:{
      jj_consume_token(Contar);
      nodo1 = contar();
padre.addHijo(nodo1);
      pt();
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Backup:{
      jj_consume_token(Backup);
      padre = backup(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Restaurar:{
      jj_consume_token(Restaurar);
      padre = restaurar(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Crear:{
      padre = crear(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Usar:{
      padre = usar(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Si:{
      jj_consume_token(Si);
      padre = si(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Mientras:{
      jj_consume_token(Mientras);
      padre = mientras(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Detener:{
      jj_consume_token(Detener);
      padre = detener(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Selec:{
      jj_consume_token(Selec);
      padre = selecciona(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Imprimir:{
      jj_consume_token(Imprimir);
      padre = imprimir(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Para:{
      jj_consume_token(Para);
      padre = para(padre);
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    case Id:{
      t1 = jj_consume_token(Id);
      jj_consume_token(Pai);
Nodo tmp = new Nodo("llamada");
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setValor(t1.image);
                      tmp.setColumna(t1.beginColumn);
                      tmp.setFila(t1.beginLine);
                      nodo1 = tmp;
      nodo1 = funpara(nodo1);
      nodo1 = s9(nodo1);
padre.addHijo(nodo1);
      jj_consume_token(Paf);
      pt();
      padre = proceconte(padre);
{if ("" != null) return padre;}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
{if ("" != null) return padre;}
    }
    throw new Error("Missing return statement in function");
  }

//t2=<Aidp> <Igual> s0()
  final public Nodo asignar(Nodo padre) throws ParseException {Nodo nodo1;
    Nodo n2;
    Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Aid:{
      t1 = jj_consume_token(Aid);
Nodo tmp = new Nodo("asignar");
               tmp.setNumNodo(grausu.contador++);
               tmp.setValor(t1.image);
               tmp.setTipo("variable");
               tmp.setColumna(t1.beginColumn);
               tmp.setFila(t1.beginLine);
               nodo1 = tmp;
      jj_consume_token(Igual);
      n2 = s0();
nodo1.addHijo(n2);
                        padre.addHijo(nodo1);
                        {if ("" != null) return padre;}
      break;
      }
    case Aidp:{
      t1 = jj_consume_token(Aidp);
Nodo tmp = new Nodo("asignar");
               tmp.setNumNodo(grausu.contador++);
               tmp.setValor(t1.image);
               tmp.setTipo("variable1p");
               tmp.setColumna(t1.beginColumn);
               tmp.setFila(t1.beginLine);
               nodo1 = tmp;
      jj_consume_token(Igual);
      n2 = s0();
nodo1.addHijo(n2);
                        padre.addHijo(nodo1);
                        {if ("" != null) return padre;}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//<Aid> listavariable() tipodato() expresion()
  final public Nodo declarar(Nodo padre) throws ParseException {Nodo nodo1;
    Nodo nodo2;
    Nodo nodo3;
    Nodo nodo4;
    Token t1;
    t1 = jj_consume_token(Aid);
Nodo tmp = new Nodo("declarar");
                tmp.setNumNodo(grausu.contador++);
                nodo1 =tmp;
                Nodo tmp2 = new Nodo("variables");
                tmp2.setNumNodo(grausu.contador++);
                nodo2 =tmp2;
                Nodo tmp3 = new Nodo("sentencias");
                tmp3.setNumNodo(grausu.contador++);
                nodo3 =tmp3;
                Nodo tmp4 = new Nodo(t1.image);
                tmp4.setNumNodo(grausu.contador++);
                tmp4.setColumna(t1.beginColumn);
                tmp4.setFila(t1.beginLine);
                nodo2.addHijo(tmp4);
    nodo2 = listavariable(nodo2);
    nodo4 = tipodato();
nodo2.setTipo(nodo4.getTipo());  nodo2.setValor(nodo4.getValor()); nodo1.addHijo(nodo2);
    nodo3 = expresion(nodo3);
nodo1.addHijo(nodo3); padre.addHijo(nodo1); {if ("" != null) return padre;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo listavariable(Nodo hijo) throws ParseException {Nodo nodo1;
    Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      t1 = jj_consume_token(Aid);
Nodo tmp = new Nodo(t1.image);
                   tmp.setNumNodo(grausu.contador++);
                   tmp.setColumna(t1.beginColumn);
                   tmp.setFila(t1.beginLine);
                   nodo1 = tmp; hijo.addHijo(nodo1);
      hijo = listavariable(hijo);
{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
{if ("" != null) return hijo;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo expresion(Nodo primo) throws ParseException {Nodo n2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Igual:{
      jj_consume_token(Igual);
      n2 = s0();
primo.addHijo(n2); {if ("" != null) return primo;}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
{if ("" != null) return primo;}
    }
    throw new Error("Missing return statement in function");
  }

  final public void pt() throws ParseException {
    try {
      jj_consume_token(Pt);
    } catch (ParseException x) {
System.out.println(x.toString());
                Token t;
                do {
                        t = getNextToken();
        } while (t.kind != Pt);
    }
  }

  final public void llf() throws ParseException {
    try {
      jj_consume_token(Llf);
    } catch (ParseException x) {
System.out.println(x.toString());
                Token t;
                do {
                        t = getNextToken();
        } while (t.kind != Llf);
    }
  }

//************************************************************************************Usuario
  final public Nodo crearusuario(Nodo hijo) throws ParseException {Nodo nodo1;
    Token t1;
    t1 = jj_consume_token(Id);
Nodo tmp = new Nodo(t1.image);
             tmp.setNumNodo(grausu.contador++);
             tmp.setColumna(t1.beginColumn);
             tmp.setFila(t1.beginLine);
             nodo1 = tmp;
    jj_consume_token(Colocar);
    jj_consume_token(Pass);
    jj_consume_token(Igual);
    t1 = jj_consume_token(Texto);
nodo1.setValor(t1.image);
    pt();
hijo.addHijo(nodo1);
            {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

//**************************************************************************INSTRUCCION USAR
  final public 
Nodo usar(Nodo raiz) throws ParseException {Nodo nodo1;
    Token t1;
    jj_consume_token(Usar);
    t1 = jj_consume_token(Id);
Nodo tmp = new Nodo("usar");
                     tmp.setNumNodo(grausu.contador++);
                     tmp.setValor(t1.image);
                     tmp.setColumna(t1.beginColumn);
                     tmp.setFila(t1.beginLine);
                     nodo1 = tmp;
    pt();
raiz.addHijo(nodo1); {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

//**************************************************************************RETORNO
  final public 
Nodo retorno(Nodo padre) throws ParseException {Nodo n2;
    n2 = s0();
Nodo tmp = new Nodo("retorno");
              tmp.setNumNodo(grausu.contador++);
              tmp.addHijo(n2);
              padre.addHijo(tmp);
              {if ("" != null) return padre;}
    throw new Error("Missing return statement in function");
  }

//****************************************************************************INSTRUCCION ALTERAR
/*
<Tabla> Nodo <Id> tablaalt()
|<Objeto> <Id> objalt()
|<Usuario> <Id> usualt()
*/
  final public 
Nodo alterar(Nodo raiz) throws ParseException {Nodo nodo1;
    Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Tabla:{
      jj_consume_token(Tabla);
Nodo tmp = new Nodo("alterar tabla");
               tmp.setNumNodo(grausu.contador++);
               tmp.setValor("");
               nodo1 = tmp;
      t1 = jj_consume_token(Id);
nodo1.setValor(t1.image);
              nodo1.setColumna(t1.beginColumn);
              nodo1.setFila(t1.beginLine);
      nodo1 = tablaalt(nodo1);
raiz.addHijo(nodo1);
          {if ("" != null) return raiz;}
      break;
      }
    case Objeto:{
      jj_consume_token(Objeto);
Nodo tmp = new Nodo("alterar objeto");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setValor("");
                 nodo1 = tmp;
      t1 = jj_consume_token(Id);
nodo1.setValor(t1.image);
              nodo1.setColumna(t1.beginColumn);
              nodo1.setFila(t1.beginLine);
      nodo1 = objalt(nodo1);
raiz.addHijo(nodo1);
                 {if ("" != null) return raiz;}
      break;
      }
    case Usuario:{
      jj_consume_token(Usuario);
Nodo tmp = new Nodo("alterar usuario");
                 tmp.setNumNodo(grausu.contador++);
                 nodo1 = tmp;
      t1 = jj_consume_token(Id);
nodo1.setValor(t1.image);
                nodo1.setColumna(t1.beginColumn);
                nodo1.setFila(t1.beginLine);
      nodo1 = usualt(nodo1);
raiz.addHijo(nodo1); {if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//<Pai> tipodato() <Id> compoalt() setablaalt() <Paf> pt()
  final public Nodo tablaalt(Nodo hijo) throws ParseException {Nodo nodo1;
    Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Agregar:{
      jj_consume_token(Agregar);
hijo.setNombre("alterar_t_agr");
      jj_consume_token(Pai);
      hijo = creaparametros(hijo);
      jj_consume_token(Paf);
      pt();
{if ("" != null) return hijo;}
      break;
      }
    case Quitar:{
      jj_consume_token(Quitar);
hijo.setNombre("alterar_t_quit");
      t1 = jj_consume_token(Id);
Nodo tmp = new Nodo(t1.image);
                tmp.setNumNodo(grausu.contador++);
                tmp.setColumna(t1.beginColumn);
                tmp.setFila(t1.beginLine);
                nodo1 = tmp; hijo.addHijo(nodo1);
      hijo = quitarseg(hijo);
      pt();
{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo quitarseg(Nodo hijo) throws ParseException {Token t1;
    Nodo nodo1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      t1 = jj_consume_token(Id);
Nodo tmp = new Nodo(t1.image);
                    tmp.setNumNodo(grausu.contador++);
                    tmp.setColumna(t1.beginColumn);
                    tmp.setFila(t1.beginLine);
                    nodo1 = tmp; hijo.addHijo(nodo1);
      hijo = quitarseg(hijo);
{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[15] = jj_gen;
{if ("" != null) return hijo;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo objalt(Nodo hijo) throws ParseException {Nodo nodo1;
    Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Agregar:{
      jj_consume_token(Agregar);
hijo.setNombre("alterar_ob_agr");
      jj_consume_token(Pai);
      hijo = creaparametros(hijo);
      jj_consume_token(Paf);
      pt();
{if ("" != null) return hijo;}
      break;
      }
    case Quitar:{
      jj_consume_token(Quitar);
hijo.setNombre("alterar_ob_quit");
      t1 = jj_consume_token(Id);
Nodo tmp = new Nodo(t1.image);
                tmp.setNumNodo(grausu.contador++);
                tmp.setColumna(t1.beginColumn);
                tmp.setFila(t1.beginLine);
                nodo1 = tmp; hijo.addHijo(nodo1);
      hijo = quitarseg(hijo);
      pt();
{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo usualt(Nodo hijo) throws ParseException {Token t1;
    jj_consume_token(Cambiar);
    jj_consume_token(Pass);
    jj_consume_token(Igual);
    t1 = jj_consume_token(Texto);
hijo.setTipo(t1.image);
    pt();
{if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

//*****************************************************************************Instruccion Eliminar
  final public 
Nodo eliminar(Nodo raiz) throws ParseException {Nodo nodo1;
    Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Tabla:{
      jj_consume_token(Tabla);
      t1 = jj_consume_token(Id);
Nodo tmp = new Nodo("Eliminar tabla");
                        tmp.setNumNodo(grausu.contador++);
                        tmp.setValor(t1.image);
                        tmp.setColumna(t1.beginColumn);
                        tmp.setFila(t1.beginLine);
                        nodo1 = tmp;
                        raiz.addHijo(nodo1);
      pt();
{if ("" != null) return raiz;}
      break;
      }
    case BaseD:{
      jj_consume_token(BaseD);
      t1 = jj_consume_token(Id);
Nodo tmp = new Nodo("eliminar db");
                        tmp.setNumNodo(grausu.contador++);
                        tmp.setValor(t1.image);
                        tmp.setColumna(t1.beginColumn);
                        tmp.setFila(t1.beginLine);
                        nodo1 = tmp;
                        raiz.addHijo(nodo1);
      pt();
{if ("" != null) return raiz;}
      break;
      }
    case Objeto:{
      jj_consume_token(Objeto);
      t1 = jj_consume_token(Id);
Nodo tmp = new Nodo("eliminar objeto");
                        tmp.setNumNodo(grausu.contador++);
                        tmp.setValor(t1.image);
                        tmp.setColumna(t1.beginColumn);
                        tmp.setFila(t1.beginLine);
                        nodo1 = tmp;
                        raiz.addHijo(nodo1);
      pt();
{if ("" != null) return raiz;}
      break;
      }
    case Usuario:{
      jj_consume_token(Usuario);
      t1 = jj_consume_token(Id);
Nodo tmp = new Nodo("eliminar usu");
                        tmp.setNumNodo(grausu.contador++);
                        tmp.setValor(t1.image);
                        tmp.setColumna(t1.beginColumn);
                        tmp.setFila(t1.beginLine);
                        nodo1 = tmp;
                        raiz.addHijo(nodo1);
      pt();
{if ("" != null) return raiz;}
      break;
      }
    case Procedimiento:{
      jj_consume_token(Procedimiento);
      t1 = jj_consume_token(Id);
Nodo tmp = new Nodo("eliminar proce");
                        tmp.setNumNodo(grausu.contador++);
                        tmp.setValor(t1.image);
                        tmp.setColumna(t1.beginColumn);
                        tmp.setFila(t1.beginLine);
                        nodo1 = tmp;
                        raiz.addHijo(nodo1);
      pt();
{if ("" != null) return raiz;}
      break;
      }
    case Funcion:{
      jj_consume_token(Funcion);
      t1 = jj_consume_token(Id);
Nodo tmp = new Nodo("eliminar fun");
                        tmp.setNumNodo(grausu.contador++);
                        tmp.setValor(t1.image);
                        tmp.setColumna(t1.beginColumn);
                        tmp.setFila(t1.beginLine);
                        nodo1 = tmp;
                        raiz.addHijo(nodo1);
      pt();
{if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//*******************************************************************************Instruccion insertar

//<En> <Tabla> <Id> <Pai> tipoinsetar()
  final public Nodo insertar(Nodo raiz) throws ParseException {Token t1;
    Nodo nodo1;
    jj_consume_token(En);
    jj_consume_token(Tabla);
    t1 = jj_consume_token(Id);
Nodo tmp = new Nodo("insertar");
                          tmp.setNumNodo(grausu.contador++);
                          tmp.setColumna(t1.beginColumn);
                          tmp.setFila(t1.beginLine);
                          tmp.setValor(t1.image);
                          nodo1 = tmp;
    jj_consume_token(Pai);
    nodo1 = tipoinsetar(nodo1);
raiz.addHijo(nodo1);
                             {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

/* LOOKAHEAD(2) <Id> listaid() <Paf> <Valores> <Pai> s0() listaceros() <Paf> pt() 
| LOOKAHEAD(2) s0() listaceros() <Paf>  pt() */
  final public 
Nodo tipoinsetar(Nodo hijo) throws ParseException {Nodo nodo1;
    Nodo n2;
    Token t1;
    if (jj_2_1(2)) {
      t1 = jj_consume_token(Id);
hijo.setNombre("insertar valores");
        Nodo tmp = new Nodo("campos"); tmp.setNumNodo(grausu.contador++);
        Nodo tmp2 = new Nodo(t1.image); tmp2.setNumNodo(grausu.contador++);
        tmp2.setColumna(t1.beginColumn); tmp2.setFila(t1.beginLine);
        nodo1 = tmp;
        nodo1.addHijo(tmp2);
      nodo1 = listaid(nodo1);
      jj_consume_token(Paf);
hijo.addHijo(nodo1);
      jj_consume_token(Valores);
      jj_consume_token(Pai);
Nodo tmp3 = new Nodo("Valores");
                        tmp3.setNumNodo(grausu.contador++);
                        nodo1 = tmp3;
      n2 = s0();
nodo1.addHijo(n2);
      nodo1 = listaceros(nodo1);
      jj_consume_token(Paf);
      pt();
hijo.addHijo(nodo1); {if ("" != null) return hijo;}
    } else if (jj_2_2(2)) {
      n2 = s0();
hijo.addHijo(n2);
      hijo = listaceros(hijo);
      jj_consume_token(Paf);
      pt();
{if ("" != null) return hijo;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//
  final public Nodo listaid(Nodo primo) throws ParseException {Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      t1 = jj_consume_token(Id);
Nodo tmp2 = new Nodo(t1.image);
                      tmp2.setNumNodo(grausu.contador++);
                      tmp2.setColumna(t1.beginColumn);
                      tmp2.setFila(t1.beginLine);
                       primo.addHijo(tmp2);
      primo = listaid(primo);
{if ("" != null) return primo;}
      break;
      }
    default:
      jj_la1[18] = jj_gen;
{if ("" != null) return primo;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo listaceros(Nodo hijo) throws ParseException {Nodo n2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      n2 = s0();
hijo.addHijo(n2);
      hijo = listaceros(hijo);
{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[19] = jj_gen;
{if ("" != null) return hijo;}
    }
    throw new Error("Missing return statement in function");
  }

  final public void tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Id:{
      jj_consume_token(Id);
      break;
      }
    case Idp:{
      jj_consume_token(Idp);
      break;
      }
    case Aidp:{
      jj_consume_token(Aidp);
      break;
      }
    case Aid:{
      jj_consume_token(Aid);
      break;
      }
    case Bo:{
      jj_consume_token(Bo);
      break;
      }
    case Num:{
      jj_consume_token(Num);
      break;
      }
    case Dou:{
      jj_consume_token(Dou);
      break;
      }
    case Texto:{
      jj_consume_token(Texto);
      break;
      }
    case Date:{
      jj_consume_token(Date);
      break;
      }
    case Datetime:{
      jj_consume_token(Datetime);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//***************************************************************************************************BACKUP y Restaurar
  final public 
Nodo backup(Nodo padre) throws ParseException {Token t1;
    Nodo nodo1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Usqldump:{
      jj_consume_token(Usqldump);
Nodo tmp = new Nodo("backup usql");
                  tmp.setNumNodo(grausu.contador++);
                  nodo1 = tmp;
      t1 = jj_consume_token(Id);
nodo1.setValor(t1.image);
                nodo1.setColumna(t1.beginColumn);
                nodo1.setFila(t1.beginLine);
      t1 = jj_consume_token(Id);
      pt();
nodo1.setTipo(t1.image);
    padre.addHijo(nodo1); {if ("" != null) return padre;}
      break;
      }
    case Completo:{
      jj_consume_token(Completo);
Nodo tmp = new Nodo("backup completo");
                  tmp.setNumNodo(grausu.contador++);
                  nodo1 = tmp;
      t1 = jj_consume_token(Id);
nodo1.setValor(t1.image);
                nodo1.setColumna(t1.beginColumn);
                nodo1.setFila(t1.beginLine);
      t1 = jj_consume_token(Id);
      pt();
nodo1.setTipo(t1.image);
    padre.addHijo(nodo1); {if ("" != null) return padre;}
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo restaurar(Nodo padre) throws ParseException {Nodo nodo1;
    Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Usqldump:{
      jj_consume_token(Usqldump);
Nodo tmp = new Nodo("restaurar usql");
                  tmp.setNumNodo(grausu.contador++);
                  nodo1 = tmp;
      t1 = jj_consume_token(Id);
nodo1.setValor(t1.image);
                nodo1.setColumna(t1.beginColumn);
                nodo1.setFila(t1.beginLine);
      pt();
padre.addHijo(nodo1); {if ("" != null) return padre;}
      break;
      }
    case Completo:{
      jj_consume_token(Completo);
Nodo tmp = new Nodo("restaurar completo");
                  tmp.setNumNodo(grausu.contador++);
                  nodo1 = tmp;
      t1 = jj_consume_token(Id);
nodo1.setValor(t1.image);
                nodo1.setColumna(t1.beginColumn);
                nodo1.setFila(t1.beginLine);
      pt();
padre.addHijo(nodo1); {if ("" != null) return padre;}
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//************************************************************************** Instruccion ACTUALIZAR

//<Id> <Pai> tipoac() listavaloresac() <Paf> especialac() where() pt() 
  final public Nodo actualizar(Nodo padre) throws ParseException {Token t1;
    Nodo nodo1;
    Nodo nodo2;
    Nodo nodo3;
    Nodo n2;
    t1 = jj_consume_token(Id);
Nodo tmp = new Nodo("actualizar");
               tmp.setNumNodo(grausu.contador++);
               tmp.setValor(t1.image);
               tmp.setColumna(t1.beginColumn);
               tmp.setFila(t1.beginLine);
               Nodo tmp2 = new Nodo("campos");
               tmp2.setNumNodo(grausu.contador++);
               Nodo tmp5 = new Nodo("valores");
               tmp5.setNumNodo(grausu.contador++);
               nodo1 = tmp;
               nodo2 = tmp2;
               nodo3 = tmp5;
    jj_consume_token(Pai);
    t1 = jj_consume_token(Id);
Nodo tmp4 = new Nodo(t1.image);
                        tmp4.setNumNodo(grausu.contador++);
                        tmp4.setColumna(t1.beginColumn);
                        tmp4.setFila(t1.beginLine);
                        nodo2.addHijo(tmp4);
    nodo2 = listaid(nodo2);
nodo1.addHijo(nodo2);
    jj_consume_token(Paf);
    jj_consume_token(Valores);
    jj_consume_token(Pai);
    n2 = s0();
nodo3.addHijo(n2);
    nodo3 = listaceros(nodo3);
nodo1.addHijo(nodo3);
    jj_consume_token(Paf);
    nodo1 = where(nodo1);
    pt();
padre.addHijo(nodo1);
           {if ("" != null) return padre;}
    throw new Error("Missing return statement in function");
  }

//<Donde>  n2=s0() 
  final public Nodo where(Nodo hijo) throws ParseException {Nodo n2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Donde:{
      jj_consume_token(Donde);
      n2 = s0();
Nodo tmp = new Nodo("condiciones");
                        tmp.setNumNodo(grausu.contador++);
                        hijo.setNombre("actualizar cond");
                        tmp.addHijo(n2);
                        hijo.addHijo(tmp);
                        {if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[23] = jj_gen;
{if ("" != null) return hijo;}
    }
    throw new Error("Missing return statement in function");
  }

//************************************************************************ INSTRUCCION BORRAR
  final public 
Nodo borrar(Nodo raiz) throws ParseException {Token t1;
    Nodo nodo1;
    t1 = jj_consume_token(Id);
Nodo tmp = new Nodo("borrar");
               tmp.setNumNodo(grausu.contador++);
               tmp.setValor(t1.image);
               tmp.setColumna(t1.beginColumn);
               tmp.setFila(t1.beginLine);
               nodo1 = tmp;
    nodo1 = borrarwhere(nodo1);
    pt();
raiz.addHijo(nodo1); {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo borrarwhere(Nodo hijo) throws ParseException {Nodo n2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Donde:{
      jj_consume_token(Donde);
      n2 = s0();
hijo.setNombre("borrar cond");
                        hijo.addHijo(n2);
                        {if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[24] = jj_gen;
{if ("" != null) return hijo;}
    }
    throw new Error("Missing return statement in function");
  }

//************************************************************************ INSTRUCCION SELECCIONAR

//    <Id> listids() <De> <Id> listids() where(null) orden() 
// | <Mult> <De> <Id> listids() where(null) orden() 
  final public Nodo seleccionar(Nodo raiz) throws ParseException {Nodo nodo1;
   Nodo nodo2;
   Nodo nodo3;
   Nodo nodo4;
   Nodo n2;
   Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Id:{
      t1 = jj_consume_token(Id);
Nodo tmp1 = new Nodo("seleccionar");
                 tmp1.setNumNodo(grausu.contador++);
                 Nodo tmp2 = new Nodo("listaid");
                 tmp2.setNumNodo(grausu.contador++);
                 Nodo tmp3 = new Nodo("listatabla");
                 tmp3.setNumNodo(grausu.contador++);
                 nodo1 = tmp1;
                 nodo2 = tmp2;
                 nodo3 = tmp3;
                 Nodo tmp4 = new Nodo(t1.image);
                 tmp4.setNumNodo(grausu.contador++);
                 tmp4.setColumna(t1.beginColumn);
                 tmp4.setFila(t1.beginLine);
                 nodo2.addHijo(tmp4);
      nodo2 = listaid(nodo2);
      jj_consume_token(De);
nodo1.addHijo(nodo2);
      t1 = jj_consume_token(Id);
Nodo tmp5 = new Nodo(t1.image);
                  tmp5.setNumNodo(grausu.contador++);
                  tmp5.setColumna(t1.beginColumn);
                  tmp5.setFila(t1.beginLine);
                  nodo3.addHijo(tmp5);
      nodo3 = listaid(nodo3);
nodo1.addHijo(nodo3);
      nodo1 = selecwhere(nodo1);
      nodo1 = orden(nodo1);
raiz.addHijo(nodo1); {if ("" != null) return raiz;}
      break;
      }
    case Mult:{
      jj_consume_token(Mult);
Nodo tmp1 = new Nodo("seleccionar");
                 tmp1.setNumNodo(grausu.contador++);
                 Nodo tmp2 = new Nodo("*");
                 tmp2.setNumNodo(grausu.contador++);
                 Nodo tmp3 = new Nodo("listatabla");
                 tmp3.setNumNodo(grausu.contador++);
                 nodo1 = tmp1;
                 nodo2 = tmp2;
                 nodo3 = tmp3;
      nodo2 = listaid(nodo2);
      jj_consume_token(De);
nodo1.addHijo(nodo2);
      t1 = jj_consume_token(Id);
Nodo tmp5 = new Nodo(t1.image);
                  tmp5.setNumNodo(grausu.contador++);
                  tmp5.setColumna(t1.beginColumn);
                  tmp5.setFila(t1.beginLine);
                  nodo3.addHijo(tmp5);
      nodo3 = listaid(nodo3);
nodo1.addHijo(nodo3);
      nodo1 = selecwhere(nodo1);
      nodo1 = orden(nodo1);
raiz.addHijo(nodo1); {if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo selecwhere(Nodo primo) throws ParseException {Token t1;
    Nodo n2;
    Nodo nodo1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Donde:{
      jj_consume_token(Donde);
Nodo tmp = new Nodo("donde");
              tmp.setNumNodo(grausu.contador++);
              nodo1 = tmp;
      n2 = s0();
nodo1.addHijo(n2); primo.addHijo(nodo1); {if ("" != null) return primo;}
      break;
      }
    default:
      jj_la1[26] = jj_gen;
{if ("" != null) return primo;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo orden(Nodo primo) throws ParseException {Token t1;
    Nodo n2;
    Nodo nodo1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OrdenP:{
      jj_consume_token(OrdenP);
Nodo tmp = new Nodo("ordenar");
                tmp.setNumNodo(grausu.contador++);
                nodo1 = tmp;
                Nodo tmp2 = new Nodo("");
                tmp2.setNumNodo(grausu.contador++);
                n2 = tmp2;
      n2 = idorden(n2);
nodo1.addHijo(n2);
      nodo1 = tipoorden(nodo1);
primo.addHijo(nodo1); {if ("" != null) return primo;}
      break;
      }
    default:
      jj_la1[27] = jj_gen;
{if ("" != null) return primo;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo idorden(Nodo n2) throws ParseException {Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Id:{
      t1 = jj_consume_token(Id);
n2.setNombre(t1.image); n2.setValor("id");
                  n2.setColumna(t1.beginColumn);
                  n2.setFila(t1.beginLine); {if ("" != null) return n2;}
      break;
      }
    case Idp:{
      t1 = jj_consume_token(Idp);
n2.setNombre(t1.image); n2.setValor("idp");
                   n2.setColumna(t1.beginColumn);
                   n2.setFila(t1.beginLine); {if ("" != null) return n2;}
      break;
      }
    case Tid:{
      t1 = jj_consume_token(Tid);
n2.setNombre(t1.image); n2.setValor("tid");
                  n2.setColumna(t1.beginColumn);
                  n2.setFila(t1.beginLine); {if ("" != null) return n2;}
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo tipoorden(Nodo n1) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Asc:{
      jj_consume_token(Asc);
n1.setValor("asc"); {if ("" != null) return n1;}
      break;
      }
    case Desc:{
      jj_consume_token(Desc);
n1.setValor("desc"); {if ("" != null) return n1;}
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//************************************************************************ operaciones
  final public 



Nodo s0() throws ParseException {Nodo nodo1;
    Nodo nodo2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Not:{
      jj_consume_token(Not);
Nodo tmp = new Nodo("not");
              tmp.setNumNodo(grausu.contador++);
              nodo2 = tmp;
      nodo1 = s1();
nodo2.addHijo(nodo1); {if ("" != null) return nodo2;}
      break;
      }
    case Fecha:
    case FechaH:
    case Contar:
    case Id:
    case Idp:
    case Tid:
    case Aidp:
    case Aid:
    case Taid:
    case Bo:
    case Num:
    case Dou:
    case Date:
    case Datetime:
    case Resta:
    case Pai:
    case Texto:{
      nodo1 = s1();
{if ("" != null) return nodo1;}
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//s2()(( <And> ) s2())*
  final public Nodo s1() throws ParseException {Nodo n1;
    Nodo n2;
    Nodo n3;
    n1 = s2();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case And:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_1;
      }
      jj_consume_token(And);
Nodo tmp = new Nodo("and");
                     tmp.setNumNodo(grausu.contador++);
                     n3 = tmp;
      n2 = s2();
n3.addHijo(n1); n3.addHijo(n2); n1=n3;
    }
{if ("" != null) return n1;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo s2() throws ParseException {Nodo n1;
    Nodo n2;
    Nodo n3;
    n1 = s3();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Or:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_2;
      }
      jj_consume_token(Or);
Nodo tmp = new Nodo("or");
                     tmp.setNumNodo(grausu.contador++);
                     n3 = tmp;
      n2 = s3();
n3.addHijo(n1); n3.addHijo(n2); n1=n3;
    }
{if ("" != null) return n1;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo s3() throws ParseException {Nodo n1;
    Nodo n2;
    Nodo n3;
    n1 = s4();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Iguales:
      case Dife:
      case Mayorq:
      case Menorq:
      case Menori:
      case Mayori:{
        ;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Iguales:{
        jj_consume_token(Iguales);
Nodo tmp = new Nodo("==");
          tmp.setNumNodo(grausu.contador++); n3 = tmp;
        break;
        }
      case Dife:{
        jj_consume_token(Dife);
Nodo tmp = new Nodo("!=");
          tmp.setNumNodo(grausu.contador++); n3 = tmp;
        break;
        }
      case Mayorq:{
        jj_consume_token(Mayorq);
Nodo tmp = new Nodo(">");
          tmp.setNumNodo(grausu.contador++); n3 = tmp;
        break;
        }
      case Menorq:{
        jj_consume_token(Menorq);
Nodo tmp = new Nodo("<");
          tmp.setNumNodo(grausu.contador++); n3 = tmp;
        break;
        }
      case Mayori:{
        jj_consume_token(Mayori);
Nodo tmp = new Nodo(">=");
          tmp.setNumNodo(grausu.contador++); n3 = tmp;
        break;
        }
      case Menori:{
        jj_consume_token(Menori);
Nodo tmp = new Nodo("<=");
          tmp.setNumNodo(grausu.contador++); n3 = tmp;
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2 = s4();
n3.addHijo(n1); n3.addHijo(n2); n1=n3;
    }
{if ("" != null) return n1;}
    throw new Error("Missing return statement in function");
  }

//s5()(( <Suma> | <Resta> ) s5())*
  final public Nodo s4() throws ParseException {Nodo n1;
    Nodo n2;
    Nodo n3;
    n1 = s5();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Suma:
      case Resta:{
        ;
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Suma:{
        jj_consume_token(Suma);
Nodo tmp = new Nodo("mas");
                      tmp.setNumNodo(grausu.contador++);
                      n3 = tmp;
        break;
        }
      case Resta:{
        jj_consume_token(Resta);
Nodo tmp = new Nodo("menos");
                   tmp.setNumNodo(grausu.contador++);
                   n3 = tmp;
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2 = s5();
n3.addHijo(n1); n3.addHijo(n2); n1=n3;
    }
{if ("" != null) return n1;}
    throw new Error("Missing return statement in function");
  }

//s6()(( <Divi> | <Mult> ) s6())*
  final public Nodo s5() throws ParseException {Nodo n1;
    Nodo n2;
    Nodo n3;
    n1 = s6();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Divi:
      case Mult:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Divi:{
        jj_consume_token(Divi);
Nodo tmp = new Nodo("divi");
                      tmp.setNumNodo(grausu.contador++);
                      n3 = tmp;
        break;
        }
      case Mult:{
        jj_consume_token(Mult);
Nodo tmp = new Nodo("mult");
                   tmp.setNumNodo(grausu.contador++);
                   n3 = tmp;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2 = s6();
n3.addHijo(n1); n3.addHijo(n2); n1=n3;
    }
{if ("" != null) return n1;}
    throw new Error("Missing return statement in function");
  }

//s7() (( <Pote> ) s7())*
  final public Nodo s6() throws ParseException {Nodo n1;
    Nodo n2;
    Nodo n3;
    n1 = s8();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Pote:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_6;
      }
      jj_consume_token(Pote);
Nodo tmp = new Nodo("pote");
                     tmp.setNumNodo(grausu.contador++);
                     n3 = tmp;
      n2 = s8();
n3.addHijo(n1); n3.addHijo(n2); n1=n3;
    }
{if ("" != null) return n1;}
    throw new Error("Missing return statement in function");
  }

//importante**
  final public Nodo s8() throws ParseException {Nodo nodo1;
    Nodo nodo2;
    String cadena;
    Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Num:{
      t1 = jj_consume_token(Num);
Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("num");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 {if ("" != null) return tmp;}
      break;
      }
    case Bo:{
      t1 = jj_consume_token(Bo);
Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("bool");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 {if ("" != null) return tmp;}
      break;
      }
    case Dou:{
      t1 = jj_consume_token(Dou);
Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("double");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 {if ("" != null) return tmp;}
      break;
      }
    case Texto:{
      t1 = jj_consume_token(Texto);
cadena = t1.image.substring(1, t1.image.length()-1);
                  Nodo tmp = new Nodo(cadena);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("texto");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 {if ("" != null) return tmp;}
      break;
      }
    case Idp:{
      t1 = jj_consume_token(Idp);
Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("id1p");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 {if ("" != null) return tmp;}
      break;
      }
    case Tid:{
      t1 = jj_consume_token(Tid);
Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("id2p");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 {if ("" != null) return tmp;}
      break;
      }
    case Aid:{
      t1 = jj_consume_token(Aid);
Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("variable");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 {if ("" != null) return tmp;}
      break;
      }
    case Aidp:{
      t1 = jj_consume_token(Aidp);
Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("variable1p");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 {if ("" != null) return tmp;}
      break;
      }
    case Taid:{
      t1 = jj_consume_token(Taid);
Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("variable2p");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 {if ("" != null) return tmp;}
      break;
      }
    case Fecha:{
      t1 = jj_consume_token(Fecha);
Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("fecha");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 {if ("" != null) return tmp;}
      break;
      }
    case FechaH:{
      t1 = jj_consume_token(FechaH);
Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("fechahora");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 {if ("" != null) return tmp;}
      break;
      }
    case Datetime:{
      t1 = jj_consume_token(Datetime);
Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("datatime");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 {if ("" != null) return tmp;}
      break;
      }
    case Date:{
      t1 = jj_consume_token(Date);
Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("date");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 {if ("" != null) return tmp;}
      break;
      }
    case Resta:{
      jj_consume_token(Resta);
Nodo tmp = new Nodo("union");
              tmp.setNumNodo(grausu.contador++);
              nodo2 = tmp;
      nodo1 = s8();
nodo2.addHijo(nodo1); {if ("" != null) return nodo2;}
      break;
      }
    case Pai:{
      jj_consume_token(Pai);
      nodo1 = s0();
      jj_consume_token(Paf);
{if ("" != null) return nodo1;}
      break;
      }
    case Contar:{
      jj_consume_token(Contar);
      nodo1 = contar();
{if ("" != null) return nodo1;}
      break;
      }
    case Id:{
      t1 = jj_consume_token(Id);
Nodo tmp = new Nodo("id");
                tmp.setNumNodo(grausu.contador++);
                tmp.setValor(t1.image);
                tmp.setColumna(t1.beginColumn);
                tmp.setFila(t1.beginLine);
                nodo1 = tmp;
      nodo1 = esfuncion(nodo1);
{if ("" != null) return nodo1;}
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo esfuncion(Nodo hijo) throws ParseException {Nodo nodo1;
    Nodo nodo2;
    String cadena;
    Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Pai:{
      jj_consume_token(Pai);
hijo.setNombre("llamada");
      hijo = funpara(hijo);
      nodo1 = s9(hijo);
      jj_consume_token(Paf);
{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[41] = jj_gen;
{if ("" != null) return hijo;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo funpara(Nodo hijo) throws ParseException {Nodo nodo1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Fecha:
    case FechaH:
    case Contar:
    case Id:
    case Idp:
    case Tid:
    case Aidp:
    case Aid:
    case Taid:
    case Bo:
    case Num:
    case Dou:
    case Date:
    case Datetime:
    case Resta:
    case Not:
    case Pai:
    case Texto:{
      nodo1 = s0();
hijo.addHijo(nodo1); {if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[42] = jj_gen;
{if ("" != null) return hijo;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo s9(Nodo hijo) throws ParseException {Nodo nodo1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Cm:{
      jj_consume_token(Cm);
      nodo1 = s0();
hijo.addHijo(nodo1);
      hijo = s9(hijo);
{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[43] = jj_gen;
{if ("" != null) return hijo;}
    }
    throw new Error("Missing return statement in function");
  }

//*************************************************************************************OTORGAR y DENEGAR
  final public 
Nodo otorgar(Nodo raiz) throws ParseException {Nodo nodo1;
    Token t1;
    t1 = jj_consume_token(Id);
Nodo tmp = new Nodo("otorgar");
                     tmp.setNumNodo(grausu.contador++);
                     tmp.setValor(t1.image);
                     tmp.setColumna(t1.beginColumn);
                     tmp.setFila(t1.beginLine);
                     nodo1 = tmp;
    jj_consume_token(Cm);
    nodo1 = objetopermiso(nodo1);
    pt();
raiz.addHijo(nodo1); {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

//<Id> <Cm> objetopermiso() pt()
  final public Nodo denegar(Nodo hijo) throws ParseException {Nodo nodo1;
     Token t1;
    t1 = jj_consume_token(Id);
Nodo tmp = new Nodo("denegar");
                     tmp.setNumNodo(grausu.contador++);
                     tmp.setValor(t1.image);
                     tmp.setColumna(t1.beginColumn);
                     tmp.setFila(t1.beginLine);
                     nodo1 = tmp;
    jj_consume_token(Cm);
    nodo1 = objetopermiso(nodo1);
    pt();
hijo.addHijo(nodo1); {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

//<Id> <punto> <Mult>
  final public Nodo objetopermiso(Nodo hijo) throws ParseException {String cadena;
    Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Idp:{
      t1 = jj_consume_token(Idp);
cadena = hijo.getNombre()+" idp";
      hijo.setNombre(cadena);
      hijo.setTipo(t1.image);
      {if ("" != null) return hijo;}
      break;
      }
    case Id:{
      t1 = jj_consume_token(Id);
      jj_consume_token(punto);
      jj_consume_token(Mult);
cadena = hijo.getNombre()+" todos";
      hijo.setNombre(cadena);
      hijo.setTipo(t1.image);
      {if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//**********************************************************************************Funcion SI()

//<Pai> s0() <Paf> <Lli> proceconte(null) llf() sino()
  final public Nodo si(Nodo padre) throws ParseException {Nodo nodo1;
    Nodo nodo2;
    Nodo n2;
    Token t1;
    jj_consume_token(Pai);
    n2 = s0();
    jj_consume_token(Paf);
Nodo tmp = new Nodo("fun_si");
                          tmp.setNumNodo(grausu.contador++);
                          nodo1 = tmp;
                          nodo1.addHijo(n2);
                          Nodo tmp2 = new Nodo("instrucciones");
                          tmp2.setNumNodo(grausu.contador++);
                          nodo2 = tmp2;
    jj_consume_token(Lli);
    nodo2 = proceconte(nodo2);
nodo1.addHijo(nodo2);
    llf();
    nodo1 = sino(nodo1);
padre.addHijo(nodo1); {if ("" != null) return padre;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo sino(Nodo hijo) throws ParseException {Nodo nodo1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Sino:{
      jj_consume_token(Sino);
Nodo tmp = new Nodo("fun_sino");
               tmp.setNumNodo(grausu.contador++);
               nodo1 = tmp;
      jj_consume_token(Lli);
      nodo1 = proceconte(nodo1);
      llf();
hijo.addHijo(nodo1); {if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[45] = jj_gen;
{if ("" != null) return hijo;}
    }
    throw new Error("Missing return statement in function");
  }

//**************************************************************************SELECCIONA
  final public 
Nodo selecciona(Nodo padre) throws ParseException {Nodo nodo1;
    Nodo nodo2;
    Nodo n2;
    Token t1;
    jj_consume_token(Pai);
    n2 = s0();
Nodo tmp = new Nodo("switch");
                     tmp.setNumNodo(grausu.contador++);
                     nodo1 = tmp;
                     nodo1.addHijo(n2);
    jj_consume_token(Paf);
    jj_consume_token(Lli);
Nodo tmp2 = new Nodo("casos");
                     tmp2.setNumNodo(grausu.contador++);
                     nodo2 = tmp2;
    nodo2 = caso(nodo2);
    llf();
nodo1.addHijo(nodo2); padre.addHijo(nodo1);
      {if ("" != null) return padre;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo caso(Nodo hijo) throws ParseException {Nodo nodo1;
    Token t1;
    Nodo n2;
    jj_consume_token(Caso);
    n2 = puntual();
    jj_consume_token(Pp);
    n2 = proceconte(n2);
hijo.addHijo(n2);
    hijo = caso2(hijo);
{if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo puntual() throws ParseException {Nodo nodo1;
    Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Texto:{
      t1 = jj_consume_token(Texto);
Nodo tmp = new Nodo("caso");
                    tmp.setNumNodo(grausu.contador++);
                    tmp.setValor(t1.image);
                    tmp.setTipo("texto");
                    tmp.setColumna(t1.beginColumn);
                    tmp.setFila(t1.beginLine);
                    {if ("" != null) return tmp;}
      break;
      }
    case Bo:{
      t1 = jj_consume_token(Bo);
Nodo tmp = new Nodo("caso");
                    tmp.setNumNodo(grausu.contador++);
                    tmp.setValor(t1.image);
                    tmp.setTipo("bool");
                    tmp.setColumna(t1.beginColumn);
                    tmp.setFila(t1.beginLine);
                    {if ("" != null) return tmp;}
      break;
      }
    case Num:{
      t1 = jj_consume_token(Num);
Nodo tmp = new Nodo("caso");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setValor(t1.image);
                 tmp.setTipo("num");
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 {if ("" != null) return tmp;}
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo caso2(Nodo hijo) throws ParseException {Nodo nodo1;
    Token t1;
    Nodo n2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Caso:{
      jj_consume_token(Caso);
      n2 = puntual();
      jj_consume_token(Pp);
      n2 = proceconte(n2);
hijo.addHijo(n2);
      hijo = caso2(hijo);
{if ("" != null) return hijo;}
      break;
      }
    case Defecto:{
      jj_consume_token(Defecto);
      jj_consume_token(Pp);
Nodo tmp = new Nodo("defecto");
                 tmp.setNumNodo(grausu.contador++);
                 n2=tmp;
      n2 = proceconte(n2);
hijo.addHijo(n2);
      hijo = caso2(hijo);
{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[47] = jj_gen;
{if ("" != null) return hijo;}
    }
    throw new Error("Missing return statement in function");
  }

//*****************************************************************************Instruccion Para
  final public 
Nodo para(Nodo padre) throws ParseException {Token t1;
    Nodo nodo1;
    Nodo n2;
    jj_consume_token(Pai);
Nodo tmp = new Nodo("ciclo para");
            tmp.setNumNodo(grausu.contador++);
            nodo1=tmp;
    nodo1 = pinterno(nodo1);
    jj_consume_token(Paf);
    jj_consume_token(Lli);
Nodo tmp2 = new Nodo("sentencias");
                                          tmp2.setNumNodo(grausu.contador++);
                                          n2=tmp2;
    n2 = proceconte(n2);
    llf();
nodo1.addHijo(n2); {if ("" != null) return nodo1;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo pinterno(Nodo hijo) throws ParseException {Token t1;
     Nodo nodo1;
     Nodo n2;
    jj_consume_token(Declarar);
    t1 = jj_consume_token(Aid);
    jj_consume_token(Integer);
Nodo tmp = new Nodo(t1.image);
                           tmp.setNumNodo(grausu.contador++);
                           tmp.setValor("integer");
                           tmp.setColumna(t1.beginColumn);
                           tmp.setFila(t1.beginLine);
                           nodo1 = tmp;
    jj_consume_token(Igual);
    n2 = s0();
nodo1.addHijo(n2);
    pt();
    n2 = s0();
hijo.addHijo(nodo1); hijo.addHijo(n2);
    pt();
    n2 = incremento();
hijo.addHijo(n2); {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo incremento() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Suma:{
      jj_consume_token(Suma);
      jj_consume_token(Suma);
Nodo tmp = new Nodo("incremento");
                      tmp.setNumNodo(grausu.contador++);
                      {if ("" != null) return tmp;}
      break;
      }
    case Resta:{
      jj_consume_token(Resta);
      jj_consume_token(Resta);
Nodo tmp = new Nodo("decremento");
                        tmp.setNumNodo(grausu.contador++);
                        {if ("" != null) return tmp;}
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//****************************************************************************************************Detener()
  final public 
Nodo detener(Nodo padre) throws ParseException {
    pt();
Nodo tmp = new Nodo("detener");
            tmp.setNumNodo(grausu.contador++);
            padre.addHijo(tmp);
            {if ("" != null) return padre;}
    throw new Error("Missing return statement in function");
  }

//**************************************************************************************************Mientras
  final public 
Nodo mientras(Nodo padre) throws ParseException {Nodo nodo1;
    Nodo n2;
    Nodo nodo2;
    Token t1;
    jj_consume_token(Pai);
    n2 = s0();
Nodo tmp = new Nodo("mientras");
                    tmp.setNumNodo(grausu.contador++);
                    Nodo tmp2 = new Nodo("instruciones");
                    tmp2.setNumNodo(grausu.contador++);
                    nodo1 = tmp;
                    nodo2 = tmp2;
                    nodo1.addHijo(n2);
    jj_consume_token(Paf);
    jj_consume_token(Lli);
    nodo2 = proceconte(nodo2);
nodo1.addHijo(nodo2);
    llf();
padre.addHijo(nodo1); {if ("" != null) return padre;}
    throw new Error("Missing return statement in function");
  }

//************************************************************************************************Imprimir
  final public 
Nodo imprimir(Nodo padre) throws ParseException {Nodo n2;
    Nodo nodo1;
    jj_consume_token(Pai);
    n2 = s0();
Nodo tmp = new Nodo("imprimir");
                    tmp.setNumNodo(grausu.contador++);
                    nodo1 = tmp;
                    nodo1.addHijo(n2);
    jj_consume_token(Paf);
    pt();
padre.addHijo(nodo1); {if ("" != null) return padre;}
    throw new Error("Missing return statement in function");
  }

//******************************************************************************CONTAR
  final public 
Nodo contar() throws ParseException {Nodo nodo1;
    Nodo nodo2;
    Token t1;
    jj_consume_token(Pai);
    jj_consume_token(Cii);
Nodo tmp = new Nodo("contar");
                  tmp.setNumNodo(grausu.contador++);
                  nodo1 = tmp;
    jj_consume_token(Seleccionar);
    nodo1 = seleccionar(nodo1);
    jj_consume_token(Cif);
    jj_consume_token(Paf);
{if ("" != null) return nodo1;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(Pai)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(Suma)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(Resta)) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(Resta)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(Date)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(Datetime)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(FechaH)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(Menori)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(Fecha)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(Mayori)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(Iguales)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(Menorq)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(Taid)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(Mayorq)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(Dife)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(Aidp)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(Aid)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(Tid)) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(Or)) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(Idp)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(Texto)) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(Dou)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(And)) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(Bo)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_scan_token(Cm)) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(Num)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(Pote)) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_scan_token(Cm)) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(Pai)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(Pai)) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(Not)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(Paf)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(Divi)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(Mult)) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(Id)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(Id)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(Paf)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(Contar)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public grausuTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[49];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3ff000,0x3ff000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1cfff000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3000000,0x3000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x60000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x48,0x48,0x3e80,0xf8000000,0x0,0x0,0xf8000000,0xf8000000,0x0,0x20004f,0x0,0x0,0x0,0x3200,0x30000,0x0,0x30000,0x3e80,0x0,0x0,0x0,0x0,0x0,0x400000,0x400000,0x0,0x400000,0x4000000,0x0,0x1800000,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x70,0x0,0x70,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x80,0x80,0x0,0x81,0x0,0x7e,0x81,0x81,0x0,0xc80,0xc00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f0d80,0x0,0x0,0x0,0x0,0x1000080,0x0,0x0,0x380,0x0,0x5f1f80,0x0,0x0,0xfc000000,0xfc000000,0x600000,0x600000,0x1800000,0x1800000,0x2000000,0x5f1f80,0x0,0x5f1f80,0x0,0x180,0x0,0x30000,0x0,0x600000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x18,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x100,0x0,0x0,0x100,0x800,0x0,0x0,0x100,0x0,0x0,0x100,0x100,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20024,0x1,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20020,0x20,0x20024,0x100,0x0,0x0,0x20000,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public grausu(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public grausu(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new grausuTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public grausu(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new grausuTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public grausu(grausuTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(grausuTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[115];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 49; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 115; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
