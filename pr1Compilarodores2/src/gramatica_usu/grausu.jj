options{
STATIC = false;
DEBUG_LOOKAHEAD = false;
IGNORE_CASE = true;
}

PARSER_BEGIN(grausu)

package gramatica_usu;
import pr1compilarodores2.Nodo;
import java.io.*;
import java.util.*;

public class grausu
{
    public static int contador=20000;
    public static void main( String[] args )throws ParseException
    {
            System.out.println("analisis correcto");        
    }
}

PARSER_END(grausu)

TOKEN_MGR_DECLS : {
     Token tok;
}
SKIP : 
{ 
	" "|"\n" | "\r" | "\r\n" | "\t"
        | "\u201c"
}

MORE :
{
  "#" : Comentario_una_linea
|
  "#*" : Comentario_varias_lineas
}

<Comentario_una_linea>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<Comentario_varias_lineas>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*#" > : DEFAULT
}

<Comentario_una_linea,Comentario_varias_lineas>
MORE :
{
  < ~[] >
}


TOKEN :
{
      < Crear: "crear" >
    | < Usar: "usar" >
    | < Alterar: "Alterar" >
    | < Eliminar: "eliminar" >
    | < Insertar: "insertar">
    | < Actualizar: "Actualizar">
    | < Borrar : "Borrar">
    | < Seleccionar: "Seleccionar" >
    | < Otorgar: "otorgar permisos" >
    | < Denegar: "denegar permisos" >
    | < Declarar: "declarar">
    | < Backup : "backup">
    | < Usqldump : "usqldump">
    | < Completo : "completo">
    | < Restaurar : "Restaurar">

}

TOKEN :
{ 
      < Si:"si">
    | < Selec :"selecciona">
    | < Caso:"caso">
    | < Defecto :"defecto">
    | < Sino: "Sino">
    | < Para: "Para">
    | < Mientras: "mientras">
    | < Detener: "detener">
    | < Imprimir: "Imprimir">
    | < Fecha: "fecha()">
    | < FechaH: "fecha_hora()">
    | < Contar: "contar">
}


TOKEN :
{
      < BaseD: "base_datos" >
    | < NombreT: "nombre_tabla" >
    | < Objeto: "Objeto" >
    | < Procedimiento: "procedimiento" >
    | < Funcion: "funcion">
    | < Tabla: "tabla">
    | < Usuario: "usuario">
    | < Colocar: "colocar">
    | < Pass: "password">
    | < Agregar: "Agregar">
    | < Quitar: "quitar">
    | < Cambiar: "cambiar">
    | < En : "en" >
    | < Valores : "valores" >
    | < Retorno: "retorno" >
    | < Donde: "donde" >
    | < Asc:"asc" >
    | < Desc:"Desc" >
    | < De : "de" >
    | < OrdenP: "Ordenar por">
} 

TOKEN :
{
      < Text: "text" >
    | < Integer: "integer" >
    | < Double: "double" >
    | < Bool: "bool">
    | < TDate: "date" >
    | < TDateT: "datetime" >
}

TOKEN:{
      < NoNulo :"no nulo">
    | < Nulo : "nulo">
    | < AutoI : "autoincrementable">
    | < LlaveP : "llave_primaria"> 
    | < LlaveF : "llave_foranea">
    | < Unico  : "unico">
}

TOKEN :
{
      <Id: (["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)>
     |<Idp: ((["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)(".")(["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*))>
     |<Tid: ((["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)(".")(["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)(".")(["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)) >
     |<Aidp: ((("@")["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)(".")(["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*))>
     |<Aid: (("@")["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)>
     |<Taid: ((("@")["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)(".")(["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)(".")(["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*))>
     |<Ruta: (("c:")(("\\\\")["a"-"z"](["a"-"z"]|"_"|["0"-"9"])*)*(".usac")) >
     |<RutaZ: (("\"")("c:")(("\\\\")["a"-"z"](["a"-"z"]|"_"|["0"-"9"])*)*(".zip")("\"")) >
     |<RutaU: (("\"")("c:")(("\\\\")["a"-"z"](["a"-"z"]|"_"|["0"-"9"])*)*(".udmp")("\"")) >
     |<Bo: (("0"|"1"))>
     |<Num: ((["0"-"9"])+)>
     |<Dou: ((["0"-"9"])+("."(["0"-"9"])+))>
     |<Date: (("\'")((("0")?["1"-"9"])|(["1"-"3"]["0"-"9"]))("-")((("0")?["1"-"9"])|(["1"]["0"-"2"]))("-")["1"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]("\'"))>
     |<Datetime: (("\'")((("0")?["1"-"9"])|(["1"-"3"]["0"-"9"]))("-")((("0")?["1"-"9"])|(["1"]["0"-"2"]))("-")["1"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]" "["0"-"9"]["0"-"9"]":"["0"-"9"]["0"-"9"]":"["0"-"9"]["0"-"9"]("\'"))> 
}

TOKEN:
{
     <Suma: "+" >
    | <Resta: "-" >
    | <Divi: "/">
    | <Mult: "*">
    | <Pote: "^">
    | <Iguales:"==">
    | <Dife:"!=">
    | <Mayorq :">">
    | <Menorq :"<">
    | <Menori :"<=">
    | <Mayori :">=">
    | <And : "&&">
    | <Or  : "||">
    | <Not : "!">
    | <Simbolo:"%">
    | <Dolar:"$">
}

TOKEN :
{
      <Pai: "(">
    | <Paf: ")">
    | <Pt: ";">
    | <Cm: ",">
    | <Lli: "{">
    | <Llf: "}">
    | <Igual : "=">
    | <Pp : ":">
    | <Cii : "<<">
    | <Cif : ">>">
    | <punto: ".">
    | <Ucom: "\'">
}

TOKEN :
{
     < Texto:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN:
{
    <Comilla: "\"">
}

//*********************************************************************************************INICIO

Nodo inicio(Nodo raiz):
{ }
{
    <Simbolo> raiz=nuevo(raiz) { return raiz; } 
}

Nodo nuevo(Nodo raiz):
{ }
{
      <Dolar> raiz=proceconte(raiz) <Simbolo> <EOF> { return raiz; }
    | raiz=instrucciones(raiz) <Simbolo> <EOF> { return raiz; }
}

Nodo instrucciones(Nodo raiz):
{
    Token t1;
    Nodo nodo1;
}
{
      raiz=crear(raiz) raiz=instrucciones(raiz) { return raiz; }
    | raiz=usar(raiz)  raiz=instrucciones(raiz){ return raiz; }
    | <Alterar>  raiz=alterar(raiz)  raiz=instrucciones(raiz) { return raiz; }
    | <Eliminar> raiz=eliminar(raiz) raiz=instrucciones(raiz) { return raiz; }
    | <Insertar> raiz=insertar(raiz) raiz=instrucciones(raiz) { return raiz; }
    | <Otorgar> raiz=otorgar(raiz) raiz=instrucciones(raiz) { return raiz; }
    | <Denegar> raiz=denegar(raiz) raiz=instrucciones(raiz) {  return raiz; }
    | <Actualizar> <Tabla> raiz=actualizar(raiz) raiz=instrucciones(raiz) { return raiz; }
    | <Borrar> <En> <Tabla> raiz=borrar(raiz) raiz=instrucciones(raiz) { return raiz; }       
    | <Seleccionar> raiz=seleccionar(raiz) pt() raiz=instrucciones(raiz) { return raiz; }
    | <Contar> nodo1=contar() { raiz.addHijo(nodo1); } pt() raiz=instrucciones(raiz) { return raiz; }
    | <Imprimir> raiz=imprimir(raiz) raiz=instrucciones(raiz) { return raiz; }
    
    | t1=<Id> <Pai> { Nodo tmp = new Nodo("llamada");
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setValor(t1.image);
                      tmp.setColumna(t1.beginColumn);
                      tmp.setFila(t1.beginLine);
                      nodo1 = tmp;
     } nodo1=funpara(nodo1) nodo1=s9(nodo1)
     { raiz.addHijo(nodo1); } <Paf> pt() raiz=instrucciones(raiz) { return raiz; }

    | { return raiz; }
}

//*********************************************************************************Instruccion CREAR

Nodo crear(Nodo raiz):
{
    Nodo nodo1;
}
{
    <Crear> { Nodo tmp = new Nodo("crear");
              tmp.setNumNodo(grausu.contador++);
              tmp.setValor("");
              nodo1 = tmp; } 
    nodo1=tipocrear(nodo1) { raiz.addHijo(nodo1); return raiz; } 
}

/*
 <BaseD> crearbase() 
|<Tabla> creartabla()
|<Objeto> crearobjeto()
|<Procedimiento> crearproce()
|<Funcion> crearfuncion()
|<Usuario> crearusuario()
*/

Nodo tipocrear(Nodo hijo):
{
    Nodo nodo1;
}
{
     <BaseD> { hijo.setNombre("crear base"); } 
     hijo=crearbase(hijo) {return hijo; }

    |<Tabla> { hijo.setNombre("crear tabla"); } 
     hijo=creartabla(hijo) {return hijo; }

    |<Objeto> { hijo.setNombre("crear Objeto"); }
     hijo=crearobjeto(hijo) {return hijo; }

    |<Procedimiento> { hijo.setNombre("crear proce"); }
     hijo=crearproce(hijo) {return hijo; }

    |<Funcion> { hijo.setNombre("crear funcion"); }
     hijo=crearfuncion(hijo) {return hijo; }


    |<Usuario> { hijo.setNombre("crear usuario"); } 
     hijo=crearusuario(hijo) { return hijo; }
}

Nodo crearbase(Nodo hijo):{
    Nodo nodo1;
    Token t1;
}{
    t1=<Id> { Nodo tmp = new Nodo(t1.image);
              tmp.setNumNodo(grausu.contador++);
              tmp.setColumna(t1.beginColumn);
              tmp.setFila(t1.beginLine);
              nodo1 = tmp; } 
    pt() { hijo.addHijo(nodo1); 
           return hijo; }
}

Nodo creartabla(Nodo hijo):
{   
    Token t1;
}{
    t1=<Id> { hijo.setValor(t1.image);
              hijo.setColumna(t1.beginColumn);
              hijo.setFila(t1.beginLine);}
    <Pai> hijo=creaparametros(hijo)
     <Paf> pt() { return hijo; }
}


//t1=<Id> <Pai> creaparametros() <Paf> pt()
Nodo crearobjeto(Nodo hijo):
{ 
    Token t1;
}{
    t1=<Id> { hijo.setValor(t1.image);
              hijo.setColumna(t1.beginColumn);
              hijo.setFila(t1.beginLine);}
     <Pai> hijo=creaparametros(hijo) <Paf> pt() { return hijo; }
}

/*
tipodato() <Id> complemento()
| { return; }
*/
  
Nodo creaparametros(Nodo hijo):
{
  Token t1;
  Nodo nodo1;
}{
      nodo1=tipodato() 
      t1=<Id> { nodo1.setNombre(t1.image);
                nodo1.setColumna(t1.beginColumn);  
                nodo1.setFila(t1.beginLine); } 
      nodo1=complemento(nodo1) { hijo.addHijo(nodo1); }
      hijo=segparatro(hijo) { return hijo; }
 
    | { return hijo; }
}

/*

*/

Nodo segparatro(Nodo hijo):{

}
{
     <Cm> hijo=creaparametros(hijo) hijo=segparatro(hijo) {return hijo;}
    | { return hijo; }
}

Nodo complemento(Nodo primo):
{
    Nodo nodo1;
    Token t1; 
}
{
     t1=<Nulo> { Nodo tmp = new Nodo("<Nulo>");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp; 
                 primo.addHijo(nodo1);
    } primo=complemento(primo) { return primo; }


   | t1=<NoNulo> { Nodo tmp = new Nodo("<NNulo>");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp; 
                 primo.addHijo(nodo1);
    } primo=complemento(primo) { return primo; }

    | t1=<Unico> { Nodo tmp = new Nodo("<Unico>");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp; 
                 primo.addHijo(nodo1);
    } primo=complemento(primo) { return primo; }

   | t1=<AutoI> { Nodo tmp = new Nodo("<Auto>");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp; 
                 primo.addHijo(nodo1);
    } primo=complemento(primo) { return primo; }

   | t1=<LlaveP> { Nodo tmp = new Nodo("<pk>");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp; 
                 primo.addHijo(nodo1);
    } primo=complemento(primo) { return primo; }

   | t1=<LlaveF> { Nodo tmp = new Nodo("<fk>");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp; 
                 
    }  t1=<Id> { nodo1.setValor(t1.image);}
       t1=<Id> { nodo1.setTipo(t1.image);
                 primo.addHijo(nodo1);}
    primo=complemento(primo) { return primo; }

   | { return primo; }
}

Nodo tipodato():
{
    Token t1;
}{
      t1=<Text> { Nodo tmp = new Nodo(t1.image);
                  tmp.setNumNodo(grausu.contador++);
                  tmp.setTipo("text"); 
                  return tmp; }

    | t1=<Integer> {  Nodo tmp = new Nodo(t1.image);
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setTipo("int"); 
                      return tmp; }

    | t1=<Double> { Nodo tmp = new Nodo(t1.image);
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setTipo("double"); 
                      return tmp; }

    | t1=<Bool> { Nodo tmp = new Nodo(t1.image);
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setTipo("bool"); 
                      return tmp;  }

    | t1=<TDate> {  Nodo tmp = new Nodo(t1.image);
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setTipo("date"); 
                      return tmp; }

    | t1=<TDateT> { Nodo tmp = new Nodo(t1.image);
                    tmp.setNumNodo(grausu.contador++);
                    tmp.setTipo("datetime"); 
                    return tmp; } 

    | t1=<Id> { Nodo tmp = new Nodo(t1.image);
                tmp.setNumNodo(grausu.contador++);
                tmp.setValor("obj");
                tmp.setTipo(t1.image); 
                return tmp; }
}
//*****************************************************************Crear Procedimiento
//nodo1=tipodato() { hijo.setTipo(nodo1.getTipo()); 
Nodo crearfuncion(Nodo hijo):
{
    Token t1;
    Nodo n2;
    Nodo nodo1;
}{
   t1=<Id> { hijo.setValor(t1.image);
             hijo.setColumna(t1.beginColumn);  
             hijo.setFila(t1.beginLine);
    } <Pai> { Nodo tmp = new Nodo("parametros");
              tmp.setNumNodo(grausu.contador++);
              nodo1 = tmp;
    } nodo1=paraproce(nodo1) { hijo.addHijo(nodo1); 
    } <Paf> n2=tipodato() { Nodo tmp1 = new Nodo("sentencias");
                            tmp1.setNumNodo(grausu.contador++);
                             nodo1 = tmp1;
                             hijo.setTipo(n2.getTipo()); 
    } t1=<Lli> nodo1=proceconte(nodo1) { nodo1.setColumna(t1.beginLine);
    } t1=<Llf> {  nodo1.setFila(t1.beginLine); hijo.addHijo(nodo1); 
                  return hijo; } 
}

//<Id> <Pai> paraproce() <Paf> <Lli> proceconte() llf() 
Nodo crearproce(Nodo hijo):
{
    Token t1;
    Nodo nodo1;
}{
   t1=<Id> { hijo.setValor(t1.image);
             hijo.setColumna(t1.beginColumn);  
             hijo.setFila(t1.beginLine);
    } <Pai> { Nodo tmp = new Nodo("parametros");
              tmp.setNumNodo(grausu.contador++);
              nodo1 = tmp;
    } nodo1=paraproce(nodo1) { hijo.addHijo(nodo1); 
    } <Paf>{ Nodo tmp1 = new Nodo("sentencias");
             tmp1.setNumNodo(grausu.contador++);
             nodo1 = tmp1;
    } t1=<Lli> nodo1=proceconte(nodo1) { nodo1.setColumna(t1.beginLine);
    } t1=<Llf> {  nodo1.setFila(t1.beginLine); hijo.addHijo(nodo1); 
                  return hijo; } 

 
}

Nodo paraproce(Nodo primo):
{
   Nodo nodo1;
   Token t1;
}
{
      nodo1=tipodato() t1=<Aid> { nodo1.setNombre(t1.image);
                                  nodo1.setColumna(t1.beginColumn);  
                                  nodo1.setFila(t1.beginLine);
                                  primo.addHijo(nodo1);
    } primo=cmproce(primo) { return primo; }
    | { return primo; }
}

Nodo cmproce(Nodo primo):
{}
{
       <Cm> primo=paraproce(primo) { return primo; }
    | { return primo; }
}

Nodo proceconte(Nodo padre):
{
    Token t1;
    Nodo nodo1;
}
{
     <Alterar>  padre=alterar(padre) padre=proceconte(padre) { return padre; }
    |<Eliminar> padre=eliminar(padre) padre=proceconte(padre) { return padre; }
    |<Insertar> padre=insertar(padre) padre=proceconte(padre) { return padre; }
    | padre=asignar(padre) pt() padre=proceconte(padre) { return padre; }
    | <Declarar> padre=declarar(padre) pt() padre=proceconte(padre) { return padre; }
    | <Otorgar> padre=otorgar(padre) padre=proceconte(padre) { return padre; }
    | <Denegar> padre=denegar(padre) padre=proceconte(padre) { return padre; }
    | <Actualizar> <Tabla> padre=actualizar(padre) padre=proceconte(padre) { return padre; }
    | <Retorno> padre=retorno(padre) pt() padre=proceconte(padre) { return padre; }
    | <Borrar> <En> <Tabla> padre=borrar(padre) padre=proceconte(padre) { return padre; }
    | <Seleccionar> padre=seleccionar(padre) pt() padre=proceconte(padre) { return padre; }
    | <Contar> nodo1=contar() { padre.addHijo(nodo1); } pt() padre=proceconte(padre) { return padre; }
    | <Backup>  padre=backup(padre) padre=proceconte(padre) { return padre; }
    | <Restaurar>   padre=restaurar(padre) padre=proceconte(padre) { return padre; }
    | padre=crear(padre) padre=proceconte(padre) { return padre; }
    | padre=usar(padre)  padre=proceconte(padre) { return padre; }  

    | <Si> padre=si(padre) padre=proceconte(padre) { return padre; }
    | <Mientras> padre=mientras(padre) padre=proceconte(padre) { return padre; }
    | <Detener> padre=detener(padre) padre=proceconte(padre) { return padre; }
    | <Selec> padre=selecciona(padre) padre=proceconte(padre) { return padre; }
    | <Imprimir> padre=imprimir(padre) padre=proceconte(padre) { return padre; }

    | <Para> padre=para(padre) padre=proceconte(padre) { return padre; }
    
    
    | t1=<Id> <Pai> { Nodo tmp = new Nodo("llamada");
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setValor(t1.image);
                      tmp.setColumna(t1.beginColumn);
                      tmp.setFila(t1.beginLine);
                      nodo1 = tmp;
     } nodo1=funpara(nodo1) nodo1=s9(nodo1)
     { padre.addHijo(nodo1); } <Paf> pt() padre=proceconte(padre) { return padre; }

    | { return padre; }
}

//t2=<Aidp> <Igual> s0()
Nodo asignar(Nodo padre):
{
    Nodo nodo1;
    Nodo n2;
    Token t1;
}
{
    t1=<Aid> { Nodo tmp = new Nodo("asignar");
               tmp.setNumNodo(grausu.contador++);
               tmp.setValor(t1.image);
               tmp.setTipo("variable");
               tmp.setColumna(t1.beginColumn);
               tmp.setFila(t1.beginLine);
               nodo1 = tmp; }
      <Igual> n2=s0() { nodo1.addHijo(n2);
                        padre.addHijo(nodo1);
                        return padre; }

    |t1=<Aidp> { Nodo tmp = new Nodo("asignar");
               tmp.setNumNodo(grausu.contador++);
               tmp.setValor(t1.image);
               tmp.setTipo("variable1p");
               tmp.setColumna(t1.beginColumn);
               tmp.setFila(t1.beginLine);
               nodo1 = tmp; }
      <Igual> n2=s0() { nodo1.addHijo(n2);
                        padre.addHijo(nodo1);
                        return padre; }
}

//<Aid> listavariable() tipodato() expresion()
Nodo declarar(Nodo padre):
{
    Nodo nodo1;
    Nodo nodo2;
    Nodo nodo3;
    Nodo nodo4;
    Token t1;
}
{
     t1=<Aid> { Nodo tmp = new Nodo("declarar");
                tmp.setNumNodo(grausu.contador++);
                nodo1 =tmp;
                Nodo tmp2 = new Nodo("variables");
                tmp2.setNumNodo(grausu.contador++);
                nodo2 =tmp2;
                Nodo tmp3 = new Nodo("sentencias");
                tmp3.setNumNodo(grausu.contador++);
                nodo3 =tmp3;
                Nodo tmp4 = new Nodo(t1.image);
                tmp4.setNumNodo(grausu.contador++);
                tmp4.setColumna(t1.beginColumn);
                tmp4.setFila(t1.beginLine);
                nodo2.addHijo(tmp4);
       } nodo2=listavariable(nodo2) nodo4=tipodato()
       { nodo2.setTipo(nodo4.getTipo());  nodo2.setValor(nodo4.getValor()); nodo1.addHijo(nodo2);}
         nodo3=expresion(nodo3) { nodo1.addHijo(nodo3); padre.addHijo(nodo1); return padre; }
}

Nodo listavariable(Nodo hijo):
{
    Nodo nodo1;
    Token t1;
}
{
    <Cm> t1=<Aid> { Nodo tmp = new Nodo(t1.image);
                   tmp.setNumNodo(grausu.contador++);
                   tmp.setColumna(t1.beginColumn);
                   tmp.setFila(t1.beginLine);
                   nodo1 = tmp; hijo.addHijo(nodo1); 
    } hijo=listavariable(hijo) { return hijo; }

    | { return hijo; }
}

Nodo expresion(Nodo primo):
{
    Nodo n2;
}{
      <Igual> n2=s0() { primo.addHijo(n2); return primo; }
    |{ return primo; }
}

void pt():
{}
{
	try{
		<Pt>
	}catch(ParseException x){
		System.out.println(x.toString());
		Token t;
		do {
			t = getNextToken();
	} while (t.kind != Pt); 
	}
}

void llf():
{}
{
	try{
		<Llf>
	}catch(ParseException x){
		System.out.println(x.toString());
		Token t;
		do {
			t = getNextToken();
	} while (t.kind != Llf); 
	}
}
//************************************************************************************Usuario
Nodo crearusuario(Nodo hijo):
{
    Nodo nodo1;
    Token t1;
}{
    t1=<Id>{ Nodo tmp = new Nodo(t1.image);
             tmp.setNumNodo(grausu.contador++);
             tmp.setColumna(t1.beginColumn);
             tmp.setFila(t1.beginLine);
             nodo1 = tmp; }
    <Colocar> <Pass> <Igual> 
    t1=<Texto> { nodo1.setValor(t1.image);}
    pt() {  hijo.addHijo(nodo1);
            return hijo;} 
}

//**************************************************************************INSTRUCCION USAR

Nodo usar(Nodo raiz):
{
    Nodo nodo1;
    Token t1;
}
{
    <Usar> t1=<Id> { Nodo tmp = new Nodo("usar");
                     tmp.setNumNodo(grausu.contador++);
                     tmp.setValor(t1.image);
                     tmp.setColumna(t1.beginColumn);
                     tmp.setFila(t1.beginLine);
                     nodo1 = tmp; }
    pt() { raiz.addHijo(nodo1); return raiz; }
}
//**************************************************************************RETORNO

Nodo retorno(Nodo padre):
{
    Nodo n2;
}
{
    n2=s0() { Nodo tmp = new Nodo("retorno");
              tmp.setNumNodo(grausu.contador++);
              tmp.addHijo(n2);
              padre.addHijo(tmp);
              return padre;
   }
}

//****************************************************************************INSTRUCCION ALTERAR
/*
<Tabla> Nodo <Id> tablaalt()
|<Objeto> <Id> objalt()
|<Usuario> <Id> usualt()
*/

Nodo alterar(Nodo raiz):
{
    Nodo nodo1;
    Token t1;
}
{
     <Tabla> { Nodo tmp = new Nodo("alterar tabla");
               tmp.setNumNodo(grausu.contador++);
               tmp.setValor("");
               nodo1 = tmp; } 
    t1=<Id> { nodo1.setValor(t1.image);
              nodo1.setColumna(t1.beginColumn);  
              nodo1.setFila(t1.beginLine);
    } nodo1=tablaalt(nodo1) 
        { raiz.addHijo(nodo1);
          return raiz; }

    |<Objeto>  { Nodo tmp = new Nodo("alterar objeto");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setValor("");
                 nodo1 = tmp; 
    } t1=<Id> { nodo1.setValor(t1.image);
              nodo1.setColumna(t1.beginColumn);  
              nodo1.setFila(t1.beginLine);
    } nodo1=objalt(nodo1) { raiz.addHijo(nodo1);
                 return raiz; }

    |<Usuario> { Nodo tmp = new Nodo("alterar usuario");
                 tmp.setNumNodo(grausu.contador++);
                 nodo1 = tmp; 
    } t1=<Id> { nodo1.setValor(t1.image);
                nodo1.setColumna(t1.beginColumn);  
                nodo1.setFila(t1.beginLine);
    } nodo1=usualt(nodo1) {  raiz.addHijo(nodo1); return raiz; }
}


//<Pai> tipodato() <Id> compoalt() setablaalt() <Paf> pt()
Nodo tablaalt(Nodo hijo):
{ 
     Nodo nodo1;
    Token t1;
}
{
      <Agregar> { hijo.setNombre("alterar_t_agr"); 
    } <Pai> hijo=creaparametros(hijo) <Paf>
      pt() { return hijo; }

    | <Quitar> { hijo.setNombre("alterar_t_quit"); 
    } t1=<Id> { Nodo tmp = new Nodo(t1.image);
                tmp.setNumNodo(grausu.contador++);
                tmp.setColumna(t1.beginColumn);
                tmp.setFila(t1.beginLine);
                nodo1 = tmp; hijo.addHijo(nodo1);
      } hijo=quitarseg(hijo) pt() { return hijo; }
}

Nodo quitarseg(Nodo hijo):
{
    Token t1;
    Nodo nodo1;
}
{
      <Cm> t1=<Id> { Nodo tmp = new Nodo(t1.image);
                    tmp.setNumNodo(grausu.contador++);
                    tmp.setColumna(t1.beginColumn);
                    tmp.setFila(t1.beginLine);
                    nodo1 = tmp; hijo.addHijo(nodo1);
      } hijo=quitarseg(hijo) { return hijo; }
    | { return hijo; }
}

Nodo objalt(Nodo hijo):
{ 
    Nodo nodo1;
    Token t1;
}
{
      <Agregar> { hijo.setNombre("alterar_ob_agr"); 
    } <Pai> hijo=creaparametros(hijo) <Paf>
      pt() { return hijo; }

    | <Quitar> { hijo.setNombre("alterar_ob_quit"); 
    } t1=<Id> { Nodo tmp = new Nodo(t1.image);
                tmp.setNumNodo(grausu.contador++);
                tmp.setColumna(t1.beginColumn);
                tmp.setFila(t1.beginLine);
                nodo1 = tmp; hijo.addHijo(nodo1);
      } hijo=quitarseg(hijo) pt() { return hijo; }
}

Nodo usualt(Nodo hijo):
{
    Token t1;
}{
    <Cambiar> <Pass> <Igual> t1=<Texto> { hijo.setTipo(t1.image); } pt() { return hijo; }
}

//*****************************************************************************Instruccion Eliminar

Nodo eliminar(Nodo raiz):
{
    Nodo nodo1;
    Token t1;
}
{
      <Tabla> t1=<Id> { Nodo tmp = new Nodo("Eliminar tabla");
                        tmp.setNumNodo(grausu.contador++);
                        tmp.setValor(t1.image);
                        tmp.setColumna(t1.beginColumn);
                        tmp.setFila(t1.beginLine);
                        nodo1 = tmp; 
                        raiz.addHijo(nodo1);
    } pt() { return raiz; }

    | <BaseD> t1=<Id> { Nodo tmp = new Nodo("eliminar db");
                        tmp.setNumNodo(grausu.contador++);
                        tmp.setValor(t1.image);
                        tmp.setColumna(t1.beginColumn);
                        tmp.setFila(t1.beginLine);
                        nodo1 = tmp; 
                        raiz.addHijo(nodo1);
    } pt() { return raiz; }

    | <Objeto> t1=<Id> { Nodo tmp = new Nodo("eliminar objeto");
                        tmp.setNumNodo(grausu.contador++);
                        tmp.setValor(t1.image);
                        tmp.setColumna(t1.beginColumn);
                        tmp.setFila(t1.beginLine);
                        nodo1 = tmp; 
                        raiz.addHijo(nodo1);
    } pt() { return raiz; }

    | <Usuario> t1=<Id> { Nodo tmp = new Nodo("eliminar usu");
                        tmp.setNumNodo(grausu.contador++);
                        tmp.setValor(t1.image);
                        tmp.setColumna(t1.beginColumn);
                        tmp.setFila(t1.beginLine);
                        nodo1 = tmp; 
                        raiz.addHijo(nodo1);
    } pt() { return raiz; }

    | <Procedimiento> t1=<Id> { Nodo tmp = new Nodo("eliminar proce");
                        tmp.setNumNodo(grausu.contador++);
                        tmp.setValor(t1.image);
                        tmp.setColumna(t1.beginColumn);
                        tmp.setFila(t1.beginLine);
                        nodo1 = tmp; 
                        raiz.addHijo(nodo1);
    } pt() { return raiz; }

    | <Funcion> t1=<Id> { Nodo tmp = new Nodo("eliminar fun");
                        tmp.setNumNodo(grausu.contador++);
                        tmp.setValor(t1.image);
                        tmp.setColumna(t1.beginColumn);
                        tmp.setFila(t1.beginLine);
                        nodo1 = tmp; 
                        raiz.addHijo(nodo1);
    } pt() { return raiz; }

}

//*******************************************************************************Instruccion insertar

//<En> <Tabla> <Id> <Pai> tipoinsetar()
Nodo insertar(Nodo raiz):
{
    Token t1;
    Nodo nodo1;
}
{
    <En> <Tabla> t1=<Id> { Nodo tmp = new Nodo("insertar");
                          tmp.setNumNodo(grausu.contador++);
                          tmp.setColumna(t1.beginColumn);
                          tmp.setFila(t1.beginLine);
                          tmp.setValor(t1.image);
                          nodo1 = tmp;
    } <Pai> nodo1=tipoinsetar(nodo1) {  raiz.addHijo(nodo1);
                             return raiz; }
}
/* LOOKAHEAD(2) <Id> listaid() <Paf> <Valores> <Pai> s0() listaceros() <Paf> pt() 
| LOOKAHEAD(2) s0() listaceros() <Paf>  pt() */

Nodo tipoinsetar(Nodo hijo):
{
    Nodo nodo1;
    Nodo n2;
    Token t1;
}
{
      LOOKAHEAD(2) t1=<Id>  { hijo.setNombre("insertar valores");
        Nodo tmp = new Nodo("campos"); tmp.setNumNodo(grausu.contador++);
        Nodo tmp2 = new Nodo(t1.image); tmp2.setNumNodo(grausu.contador++);
        tmp2.setColumna(t1.beginColumn); tmp2.setFila(t1.beginLine);
        nodo1 = tmp;
        nodo1.addHijo(tmp2);
    }  nodo1=listaid(nodo1) <Paf> { hijo.addHijo(nodo1); }
      <Valores> <Pai> { Nodo tmp3 = new Nodo("Valores"); 
                        tmp3.setNumNodo(grausu.contador++);
                        nodo1 = tmp3;
      } n2=s0() { nodo1.addHijo(n2); }  nodo1=listaceros(nodo1)
       <Paf> pt() { hijo.addHijo(nodo1); return hijo; }
    
    | LOOKAHEAD(2) n2=s0() {  hijo.addHijo(n2); }
      hijo=listaceros(hijo) <Paf>  pt() { return hijo; }
}
//
Nodo listaid(Nodo primo):
{
    Token t1;
}
{
       <Cm> t1=<Id> { Nodo tmp2 = new Nodo(t1.image); 
                      tmp2.setNumNodo(grausu.contador++);
                      tmp2.setColumna(t1.beginColumn); 
                      tmp2.setFila(t1.beginLine);
                       primo.addHijo(tmp2); } primo=listaid(primo) {return primo; }
    | { return primo; }
}

Nodo listaceros(Nodo hijo):
{
    Nodo n2;
}
{
       <Cm> n2=s0() { hijo.addHijo(n2); } hijo=listaceros(hijo) { return hijo; }
    | { return hijo; }
}


void tipo():
{}
{
      <Id>
    |<Idp>
    |<Aidp>
    |<Aid>
    |<Bo>
    |<Num>
    |<Dou>
    |<Texto>
    |<Date>
    |<Datetime>
}

//***************************************************************************************************BACKUP y Restaurar

Nodo backup(Nodo padre):
{
    Token t1;
    Nodo nodo1;
}
{
     <Usqldump> { Nodo tmp = new Nodo("backup usql");
                  tmp.setNumNodo(grausu.contador++); 
                  nodo1 = tmp;
    } t1=<Id> { nodo1.setValor(t1.image);
                nodo1.setColumna(t1.beginColumn);
                nodo1.setFila(t1.beginLine); 
    } t1=<Id> pt(){ nodo1.setTipo(t1.image); 
    padre.addHijo(nodo1); return padre;}

    |<Completo> { Nodo tmp = new Nodo("backup completo");
                  tmp.setNumNodo(grausu.contador++); 
                  nodo1 = tmp;
    } t1=<Id> { nodo1.setValor(t1.image);
                nodo1.setColumna(t1.beginColumn);
                nodo1.setFila(t1.beginLine); 
    } t1=<Id> pt() { nodo1.setTipo(t1.image); 
    padre.addHijo(nodo1); return padre;}
}

Nodo restaurar(Nodo padre):
{
    Nodo nodo1;
    Token t1;
}
{
    <Usqldump> { Nodo tmp = new Nodo("restaurar usql");
                  tmp.setNumNodo(grausu.contador++); 
                  nodo1 = tmp;
    } t1=<Id> { nodo1.setValor(t1.image);
                nodo1.setColumna(t1.beginColumn);
                nodo1.setFila(t1.beginLine); 
    } pt() { padre.addHijo(nodo1); return padre;}

    |<Completo> { Nodo tmp = new Nodo("restaurar completo");
                  tmp.setNumNodo(grausu.contador++); 
                  nodo1 = tmp;
    } t1=<Id> { nodo1.setValor(t1.image);
                nodo1.setColumna(t1.beginColumn);
                nodo1.setFila(t1.beginLine); 
    }  pt() { padre.addHijo(nodo1); return padre;}
}



//************************************************************************** Instruccion ACTUALIZAR

//<Id> <Pai> tipoac() listavaloresac() <Paf> especialac() where() pt() 
Nodo actualizar(Nodo padre):
{
    Token t1;
    Nodo nodo1;
    Nodo nodo2;
    Nodo nodo3;
    Nodo n2;
}
{
    t1=<Id>  { Nodo tmp = new Nodo("actualizar");
               tmp.setNumNodo(grausu.contador++);
               tmp.setValor(t1.image);
               tmp.setColumna(t1.beginColumn);
               tmp.setFila(t1.beginLine); 
               Nodo tmp2 = new Nodo("campos");
               tmp2.setNumNodo(grausu.contador++);
               Nodo tmp5 = new Nodo("valores");
               tmp5.setNumNodo(grausu.contador++);
               nodo1 = tmp;
               nodo2 = tmp2;
               nodo3 = tmp5;
     } <Pai> t1=<Id>  { Nodo tmp4 = new Nodo(t1.image);
                        tmp4.setNumNodo(grausu.contador++);
                        tmp4.setColumna(t1.beginColumn);
                        tmp4.setFila(t1.beginLine);
                        nodo2.addHijo(tmp4);
    }  nodo2=listaid(nodo2) { nodo1.addHijo(nodo2); } 
    <Paf> <Valores> <Pai> n2=s0() { nodo3.addHijo(n2); } 
    nodo3=listaceros(nodo3) { nodo1.addHijo(nodo3); } <Paf> nodo1=where(nodo1) 
    pt() { padre.addHijo(nodo1); 
           return padre; }
}

//<Donde>  n2=s0() 
Nodo where(Nodo hijo):
{
    Nodo n2;
}
{
     <Donde>  n2=s0() { Nodo tmp = new Nodo("condiciones");
                        tmp.setNumNodo(grausu.contador++);
                        hijo.setNombre("actualizar cond");
                        tmp.addHijo(n2);
                        hijo.addHijo(tmp); 
                        return hijo;
                      }
    | {return hijo; }
}

//************************************************************************ INSTRUCCION BORRAR

Nodo borrar(Nodo raiz):
{
    Token t1;
    Nodo nodo1;
}
{
    t1=<Id>  { Nodo tmp = new Nodo("borrar");
               tmp.setNumNodo(grausu.contador++);
               tmp.setValor(t1.image);
               tmp.setColumna(t1.beginColumn);
               tmp.setFila(t1.beginLine);
               nodo1 = tmp; 
    } nodo1=borrarwhere(nodo1) pt() { raiz.addHijo(nodo1); return raiz; }
}

Nodo borrarwhere(Nodo hijo):
{
    Nodo n2;
}
{
     <Donde>  n2=s0() { hijo.setNombre("borrar cond");
                        hijo.addHijo(n2); 
                        return hijo;
                      }
    | { return hijo; }
}

//************************************************************************ INSTRUCCION SELECCIONAR

//    <Id> listids() <De> <Id> listids() where(null) orden() 
// | <Mult> <De> <Id> listids() where(null) orden() 
Nodo seleccionar(Nodo raiz):
{
   Nodo nodo1;
   Nodo nodo2;
   Nodo nodo3;
   Nodo nodo4;
   Nodo n2;
   Token t1;
}
{
       t1=<Id> { Nodo tmp1 = new Nodo("seleccionar");
                 tmp1.setNumNodo(grausu.contador++);
                 Nodo tmp2 = new Nodo("listaid");
                 tmp2.setNumNodo(grausu.contador++);
                 Nodo tmp3 = new Nodo("listatabla");
                 tmp3.setNumNodo(grausu.contador++);
                 nodo1 = tmp1; 
                 nodo2 = tmp2;
                 nodo3 = tmp3;
                 Nodo tmp4 = new Nodo(t1.image);
                 tmp4.setNumNodo(grausu.contador++);
                 tmp4.setColumna(t1.beginColumn);
                 tmp4.setFila(t1.beginLine);
                 nodo2.addHijo(tmp4);
     } nodo2=listaid(nodo2) <De> { nodo1.addHijo(nodo2); 
     } t1=<Id> {  Nodo tmp5 = new Nodo(t1.image);
                  tmp5.setNumNodo(grausu.contador++);
                  tmp5.setColumna(t1.beginColumn);
                  tmp5.setFila(t1.beginLine);
                  nodo3.addHijo(tmp5);
    } nodo3=listaid(nodo3) { nodo1.addHijo(nodo3); 
    } nodo1=selecwhere(nodo1) nodo1=orden(nodo1) { raiz.addHijo(nodo1); return raiz; } 

    | <Mult> { Nodo tmp1 = new Nodo("seleccionar");
                 tmp1.setNumNodo(grausu.contador++);
                 Nodo tmp2 = new Nodo("*");
                 tmp2.setNumNodo(grausu.contador++);
                 Nodo tmp3 = new Nodo("listatabla");
                 tmp3.setNumNodo(grausu.contador++);
                 nodo1 = tmp1; 
                 nodo2 = tmp2;
                 nodo3 = tmp3;
     } nodo2=listaid(nodo2) <De> { nodo1.addHijo(nodo2); 
     } t1=<Id> {  Nodo tmp5 = new Nodo(t1.image);
                  tmp5.setNumNodo(grausu.contador++);
                  tmp5.setColumna(t1.beginColumn);
                  tmp5.setFila(t1.beginLine);
                  nodo3.addHijo(tmp5);
    } nodo3=listaid(nodo3) { nodo1.addHijo(nodo3); 
    } nodo1=selecwhere(nodo1) nodo1=orden(nodo1) { raiz.addHijo(nodo1); return raiz; } 
}

Nodo selecwhere(Nodo primo):
{
    Token t1;
    Nodo n2;
    Nodo nodo1;
}{
    <Donde> { Nodo tmp = new Nodo("donde");
              tmp.setNumNodo(grausu.contador++);
              nodo1 = tmp; 
    } n2=s0() { nodo1.addHijo(n2); primo.addHijo(nodo1); return primo; }
 
    | {return primo;}
}


Nodo orden(Nodo primo):
{   Token t1;
    Nodo n2;
    Nodo nodo1;
}{
      <OrdenP> { Nodo tmp = new Nodo("ordenar");
                tmp.setNumNodo(grausu.contador++);
                nodo1 = tmp; 
                Nodo tmp2 = new Nodo("");
                tmp2.setNumNodo(grausu.contador++);
                n2 = tmp2; 
      }  n2=idorden(n2) { nodo1.addHijo(n2);} nodo1=tipoorden(nodo1) { 
         primo.addHijo(nodo1); return primo; }
     | { return primo; }
}

Nodo idorden(Nodo n2):
{
    Token t1;
}{
       t1=<Id>  { n2.setNombre(t1.image); n2.setValor("id");
                  n2.setColumna(t1.beginColumn);
                  n2.setFila(t1.beginLine); return n2; } 
    |  t1=<Idp>  { n2.setNombre(t1.image); n2.setValor("idp");
                   n2.setColumna(t1.beginColumn);
                   n2.setFila(t1.beginLine); return n2; } 
    |  t1=<Tid> { n2.setNombre(t1.image); n2.setValor("tid");
                  n2.setColumna(t1.beginColumn);
                  n2.setFila(t1.beginLine); return n2; }
}

Nodo tipoorden(Nodo n1):{
}{
      <Asc>  { n1.setValor("asc"); return n1; }
    | <Desc> { n1.setValor("desc"); return n1; }
}
//************************************************************************ operaciones




Nodo s0():
{
    Nodo nodo1;
    Nodo nodo2;
}{
    <Not> {  Nodo tmp = new Nodo("not");
              tmp.setNumNodo(grausu.contador++);
              nodo2 = tmp;
    } nodo1=s1() { nodo2.addHijo(nodo1); return nodo2; }

    | nodo1=s1() { return nodo1; }
}

//s2()(( <And> ) s2())*
Nodo s1():
{
    Nodo n1;
    Nodo n2;
    Nodo n3;
}{
   n1=s2()(( <And> { Nodo tmp = new Nodo("and");
                     tmp.setNumNodo(grausu.contador++);
                     n3 = tmp;
    } ) n2=s2()  { n3.addHijo(n1); n3.addHijo(n2); n1=n3; } )* { return n1; }
}

Nodo s2():
{
    Nodo n1;
    Nodo n2;
    Nodo n3;
}{
   n1=s3()(( <Or> { Nodo tmp = new Nodo("or");
                     tmp.setNumNodo(grausu.contador++);
                     n3 = tmp;
  } ) n2=s3()  { n3.addHijo(n1); n3.addHijo(n2); n1=n3; } )* { return n1; }
}

Nodo s3():
{
    Nodo n1;
    Nodo n2;
    Nodo n3;
}{
    n1=s4()(( <Iguales> { Nodo tmp = new Nodo("==");
          tmp.setNumNodo(grausu.contador++); n3 = tmp;
    } | <Dife> { Nodo tmp = new Nodo("!=");
          tmp.setNumNodo(grausu.contador++); n3 = tmp;
    } | <Mayorq> { Nodo tmp = new Nodo(">");
          tmp.setNumNodo(grausu.contador++); n3 = tmp;
    } | <Menorq> { Nodo tmp = new Nodo("<");
          tmp.setNumNodo(grausu.contador++); n3 = tmp;
    } | <Mayori> { Nodo tmp = new Nodo(">=");
          tmp.setNumNodo(grausu.contador++); n3 = tmp;
    } | <Menori> { Nodo tmp = new Nodo("<=");
          tmp.setNumNodo(grausu.contador++); n3 = tmp;
    } ) 
    n2=s4() { n3.addHijo(n1); n3.addHijo(n2); n1=n3; } )* { return n1; }
}

//s5()(( <Suma> | <Resta> ) s5())*
Nodo s4():
{
    Nodo n1;
    Nodo n2;
    Nodo n3;
}{
    n1=s5() (( <Suma> { Nodo tmp = new Nodo("mas");
                      tmp.setNumNodo(grausu.contador++);
                      n3 = tmp;
    } | <Resta>  { Nodo tmp = new Nodo("menos");
                   tmp.setNumNodo(grausu.contador++); 
                   n3 = tmp;
    } ) n2=s5() { n3.addHijo(n1); n3.addHijo(n2); n1=n3; } )* { return n1; } 
}
//s6()(( <Divi> | <Mult> ) s6())*
Nodo s5():
{
    Nodo n1;
    Nodo n2;
    Nodo n3;
}{
    n1=s6() (( <Divi> { Nodo tmp = new Nodo("divi");
                      tmp.setNumNodo(grausu.contador++);
                      n3 = tmp;
    } | <Mult> { Nodo tmp = new Nodo("mult");
                   tmp.setNumNodo(grausu.contador++); 
                   n3 = tmp;
    } ) n2=s6() { n3.addHijo(n1); n3.addHijo(n2); n1=n3; } )* { return n1; }   
}

//s7() (( <Pote> ) s7())*
Nodo s6():
{
    Nodo n1;
    Nodo n2;
    Nodo n3;
}{
     n1=s8()(( <Pote> { Nodo tmp = new Nodo("pote");
                     tmp.setNumNodo(grausu.contador++);
                     n3 = tmp;
  } ) n2=s8()  { n3.addHijo(n1); n3.addHijo(n2); n1=n3; } )* { return n1; }
}

//importante**
Nodo s8():
{
    Nodo nodo1;
    Nodo nodo2;
    String cadena;
    Token t1;
}{
      t1=<Num> { Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("num");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 return tmp; }
    | t1=<Bo> {  Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("bool");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 return tmp; }
    | t1=<Dou> { Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("double");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 return tmp; } 
    | t1=<Texto> { cadena = t1.image.substring(1, t1.image.length()-1);
                  Nodo tmp = new Nodo(cadena);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("texto");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 return tmp; }
    | t1=<Idp>  {   Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("id1p");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 return tmp; }
    | t1=<Tid> {   Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("id2p");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 return tmp; }
    | t1=<Aid> {   Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("variable");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 return tmp; }
    | t1=<Aidp>{   Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("variable1p");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 return tmp; } 
    | t1=<Taid> {   Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("variable2p");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 return tmp; } 
    | t1=<Fecha>{   Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("fecha");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 return tmp; } 
    | t1=<FechaH>{   Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("fechahora");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 return tmp; } 
    | t1=<Datetime>{   Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("datatime");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 return tmp; } 
    | t1=<Date> {   Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++); tmp.setTipo("date");
                 tmp.setColumna(t1.beginColumn); tmp.setFila(t1.beginLine);
                 return tmp; } 

    | <Resta> {  Nodo tmp = new Nodo("union");
              tmp.setNumNodo(grausu.contador++);
              nodo2 = tmp;
      } nodo1=s8() { nodo2.addHijo(nodo1); return nodo2; }

    | <Pai> nodo1=s0() <Paf> { return nodo1; }

    | <Contar> nodo1=contar() { return nodo1; }

    | t1=<Id> { Nodo tmp = new Nodo("id");
                tmp.setNumNodo(grausu.contador++);
                tmp.setValor(t1.image);
                tmp.setColumna(t1.beginColumn);
                tmp.setFila(t1.beginLine);
                nodo1 = tmp;
    } nodo1=esfuncion(nodo1) { return nodo1; }

    
}

Nodo esfuncion(Nodo hijo):
{
    Nodo nodo1;
    Nodo nodo2;
    String cadena;
    Token t1;
}{
      <Pai> { hijo.setNombre("llamada");
     } hijo=funpara(hijo) nodo1=s9(hijo) <Paf> { return hijo; }

    | { return hijo; }
}

Nodo funpara(Nodo hijo):{
    Nodo nodo1;
}{
       nodo1=s0() { hijo.addHijo(nodo1); return hijo; }
    | {return hijo;}
}

Nodo s9(Nodo hijo):
{
    Nodo nodo1;
}
{
    <Cm> nodo1=s0() { hijo.addHijo(nodo1); } hijo=s9(hijo) { return hijo; }
    | {return hijo;}
}

//*************************************************************************************OTORGAR y DENEGAR

Nodo otorgar(Nodo raiz):
{
    Nodo nodo1;
    Token t1;
}
{
    t1=<Id>  { Nodo tmp = new Nodo("otorgar");
                     tmp.setNumNodo(grausu.contador++);
                     tmp.setValor(t1.image);
                     tmp.setColumna(t1.beginColumn);
                     tmp.setFila(t1.beginLine);
                     nodo1 = tmp; 
    } <Cm> nodo1=objetopermiso(nodo1) pt() { raiz.addHijo(nodo1); return raiz;}
}
//<Id> <Cm> objetopermiso() pt()
Nodo denegar(Nodo hijo):
{    Nodo nodo1;
     Token t1; }
{
    t1=<Id>  { Nodo tmp = new Nodo("denegar");
                     tmp.setNumNodo(grausu.contador++);
                     tmp.setValor(t1.image);
                     tmp.setColumna(t1.beginColumn);
                     tmp.setFila(t1.beginLine);
                     nodo1 = tmp; 
    } <Cm> nodo1=objetopermiso(nodo1) pt() { hijo.addHijo(nodo1); return hijo;}
}

//<Id> <punto> <Mult>
Nodo objetopermiso(Nodo hijo):
{
    String cadena;
    Token t1;
}
{
     t1=<Idp> { 
     cadena = hijo.getNombre()+" idp";
      hijo.setNombre(cadena);  
      hijo.setTipo(t1.image); 
      return hijo; }

    | t1=<Id> <punto> <Mult> { 
      cadena = hijo.getNombre()+" todos"; 
      hijo.setNombre(cadena);
      hijo.setTipo(t1.image); 
      return hijo; }
}

//**********************************************************************************Funcion SI()

//<Pai> s0() <Paf> <Lli> proceconte(null) llf() sino()
Nodo si(Nodo padre):
{
    Nodo nodo1;
    Nodo nodo2;
    Nodo n2;
    Token t1;
}
{
    <Pai> n2=s0() <Paf> { Nodo tmp = new Nodo("fun_si");
                          tmp.setNumNodo(grausu.contador++);
                          nodo1 = tmp;
                          nodo1.addHijo(n2);
                          Nodo tmp2 = new Nodo("instrucciones");
                          tmp2.setNumNodo(grausu.contador++);
                          nodo2 = tmp2;
                        }
   <Lli> nodo2=proceconte(nodo2) { nodo1.addHijo(nodo2); 
   }llf() nodo1=sino(nodo1) { padre.addHijo(nodo1); return padre; }
}


Nodo sino(Nodo hijo):
{
    Nodo nodo1;
}
{
      <Sino> { Nodo tmp = new Nodo("fun_sino");
               tmp.setNumNodo(grausu.contador++);
               nodo1 = tmp;
      } <Lli>  nodo1=proceconte(nodo1) llf() { hijo.addHijo(nodo1); return hijo; }
    | { return hijo; }
}

//**************************************************************************SELECCIONA

Nodo selecciona(Nodo padre):
{
    Nodo nodo1;
    Nodo nodo2;
    Nodo n2;
    Token t1;
}
{
    <Pai> n2=s0()  { Nodo tmp = new Nodo("switch");
                     tmp.setNumNodo(grausu.contador++);
                     nodo1 = tmp; 
                     nodo1.addHijo(n2);
     } <Paf> <Lli> { Nodo tmp2 = new Nodo("casos");
                     tmp2.setNumNodo(grausu.contador++);
                     nodo2 = tmp2; 
     } nodo2=caso(nodo2) llf() { nodo1.addHijo(nodo2); padre.addHijo(nodo1);
      return padre; }
}

Nodo caso(Nodo hijo):
{
    Nodo nodo1;
    Token t1;
    Nodo n2;
}
{
    <Caso> n2=puntual() <Pp> n2=proceconte(n2) { 
    hijo.addHijo(n2); } hijo=caso2(hijo) {return hijo; }
}

Nodo puntual():
{
    Nodo nodo1;
    Token t1;
}
{
      t1=<Texto>  { Nodo tmp = new Nodo("caso");
                    tmp.setNumNodo(grausu.contador++);
                    tmp.setValor(t1.image);
                    tmp.setTipo("texto");
                    tmp.setColumna(t1.beginColumn);
                    tmp.setFila(t1.beginLine);
                    return tmp; }

    | t1=<Bo> { Nodo tmp = new Nodo("caso");
                    tmp.setNumNodo(grausu.contador++);
                    tmp.setValor(t1.image);
                    tmp.setTipo("bool");
                    tmp.setColumna(t1.beginColumn);
                    tmp.setFila(t1.beginLine);
                    return tmp; }

    | t1=<Num> { Nodo tmp = new Nodo("caso");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setValor(t1.image);
                 tmp.setTipo("num");
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 return tmp; }
}

Nodo caso2(Nodo hijo):
{
    Nodo nodo1;
    Token t1;
    Nodo n2;
}
{
      <Caso> n2=puntual() <Pp> n2=proceconte(n2) 
    { hijo.addHijo(n2); } hijo=caso2(hijo) {return hijo; }

    | <Defecto> <Pp> { Nodo tmp = new Nodo("defecto");
                 tmp.setNumNodo(grausu.contador++); 
                 n2=tmp;
    } n2=proceconte(n2) { hijo.addHijo(n2); 
    } hijo=caso2(hijo) {return hijo; }

    | {return hijo;}
}

//*****************************************************************************Instruccion Para

Nodo para(Nodo padre):
{
    Token t1;
    Nodo nodo1;
    Nodo n2;
}
{
    <Pai> { Nodo tmp = new Nodo("ciclo para");
            tmp.setNumNodo(grausu.contador++);
            nodo1=tmp;
    } nodo1=pinterno(nodo1) <Paf> <Lli> { Nodo tmp2 = new Nodo("sentencias");
                                          tmp2.setNumNodo(grausu.contador++);
                                          n2=tmp2;
    } n2=proceconte(n2) llf() { nodo1.addHijo(n2); return nodo1; }
}

Nodo pinterno(Nodo hijo):
{
     Token t1;
     Nodo nodo1;
     Nodo n2;
}{
     <Declarar> t1=<Aid> <Integer>{ Nodo tmp = new Nodo(t1.image);
                           tmp.setNumNodo(grausu.contador++);
                           tmp.setValor("integer");
                           tmp.setColumna(t1.beginColumn);
                           tmp.setFila(t1.beginLine);
                           nodo1 = tmp; 
        } <Igual> n2=s0() { nodo1.addHijo(n2);
        } pt() n2=s0() { hijo.addHijo(nodo1); hijo.addHijo(n2);
        } pt() n2=incremento() { hijo.addHijo(n2); return hijo; }
}

Nodo incremento():
{ }{
      <Suma> <Suma> { Nodo tmp = new Nodo("incremento");
                      tmp.setNumNodo(grausu.contador++);
                      return tmp; }
    | <Resta> <Resta> { Nodo tmp = new Nodo("decremento");
                        tmp.setNumNodo(grausu.contador++); 
                        return tmp;}
}

//****************************************************************************************************Detener()

Nodo detener(Nodo padre):
{ }
{
    pt()  { Nodo tmp = new Nodo("detener");
            tmp.setNumNodo(grausu.contador++);
            padre.addHijo(tmp);
            return padre; }
}

//**************************************************************************************************Mientras

Nodo mientras(Nodo padre):
{
    Nodo nodo1;
    Nodo n2;
    Nodo nodo2;
    Token t1;
}
{
    <Pai> n2=s0() { Nodo tmp = new Nodo("mientras");
                    tmp.setNumNodo(grausu.contador++);
                    Nodo tmp2 = new Nodo("instruciones");
                    tmp2.setNumNodo(grausu.contador++);
                    nodo1 = tmp;
                    nodo2 = tmp2;
                    nodo1.addHijo(n2);
    } <Paf> <Lli> nodo2=proceconte(nodo2) { nodo1.addHijo(nodo2); 
    } llf() { padre.addHijo(nodo1); return padre;  }
}

//************************************************************************************************Imprimir

Nodo imprimir(Nodo padre):
{
    Nodo n2;
    Nodo nodo1;
}
{
    <Pai> n2=s0() { Nodo tmp = new Nodo("imprimir");
                    tmp.setNumNodo(grausu.contador++);
                    nodo1 = tmp;
                    nodo1.addHijo(n2);
    } <Paf> pt() { padre.addHijo(nodo1); return padre; }
}

//******************************************************************************CONTAR

Nodo contar():
{
    Nodo nodo1;
    Nodo nodo2;
    Token t1;
}
{
    <Pai> <Cii> { Nodo tmp = new Nodo("contar");
                  tmp.setNumNodo(grausu.contador++);
                  nodo1 = tmp; 
    } <Seleccionar> nodo1=seleccionar(nodo1) <Cif> <Paf> { return nodo1; }
}