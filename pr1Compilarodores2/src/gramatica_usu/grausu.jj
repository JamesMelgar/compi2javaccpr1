options{
STATIC = false;
DEBUG_LOOKAHEAD = false;
IGNORE_CASE = true;
}

PARSER_BEGIN(grausu)

package gramatica_usu;
import pr1compilarodores2.Nodo;
import java.io.*;
import java.util.*;

public class grausu
{
    public static int contador=5000;
    public static void main( String[] args )throws ParseException
    {
            System.out.println("analisis correcto");        
    }
}

PARSER_END(grausu)

TOKEN_MGR_DECLS : {
     Token tok;
}
SKIP : 
{ 
	" "|"\n" | "\r" | "\r\n" | "\t"
        | "\u201c"
}

MORE :
{
  "#" : Comentario_una_linea
|
  "#*" : Comentario_varias_lineas
}

<Comentario_una_linea>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<Comentario_varias_lineas>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*#" > : DEFAULT
}

<Comentario_una_linea,Comentario_varias_lineas>
MORE :
{
  < ~[] >
}


TOKEN :
{
      < Crear: "crear" >
    | < Usar: "usar" >
    | < Alterar: "Alterar" >
    | < Eliminar: "eliminar" >
    | < Insertar: "insertar">
    | < Actualizar: "Actualizar">
    | < Borrar : "Borrar">
    | < Seleccionar: "Seleccionar" >
    | < Otorgar: "otorgar permisos" >
    | < Denegar: "denegar permisos" >
    | < Declarar: "declarar">
    | < BackupU : "backup usqldump">
    | < BackupC : "backup completo">
    | < RestaU : "Restaurar usqldump">
    | < RestaC : "Restaurar completo">
}

TOKEN :
{ 
      < Si:"si">
    | < Selec :"selecciona">
    | < Caso:"caso">
    | < Defecto :"defecto">
    | < Sino: "Sino">
    | < Para: "Para">
    | < Mientras: "mientras">
    | < Detener: "detener">
    | < Imprimir: "Imprimir">
    | < Fecha: "fecha()">
    | < FechaH: "fecha_hora()">
    | < Contar: "contar">
}


TOKEN :
{
      < BaseD: "base_datos" >
    | < NombreT: "nombre_tabla" >
    | < Objeto: "Objeto" >
    | < Procedimiento: "Procedimiento" >
    | < Funcion: "funcion">
    | < Tabla: "tabla">
    | < Usuario: "usuario">
    | < Colocar: "colocar">
    | < Pass: "password">
    | < Agregar: "Agregar">
    | < Quitar: "quitar">
    | < Cambiar: "cambiar">
    | < En : "en" >
    | < Valores : "valores" >
    | < Retorno: "retorno" >
    | < Donde: "donde" >
    | < Asc:"asc" >
    | < Desc:"Desc" >
    | < De : "de" >
    | < OrdenP: "Ordenar por">
} 

TOKEN :
{
      < Text: "text" >
    | < Integer: "integer" >
    | < Double: "double" >
    | < Bool: "bool">
    | < TDate: "date" >
    | < TDateT: "datetime" >
}

TOKEN:{
      < NoNulo :"no nulo">
    | < Nulo : "nulo">
    | < AutoI : "autoincrementable">
    | < LlaveP : "llave_primaria"> 
    | < LlaveF : "llave_foranea">
    | < Unico  : "unico">
}

TOKEN :
{
      <Id: (["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)>
     |<Idp: ((["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)(".")(["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*))>
     |<Tid: ((["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)(".")(["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)(".")(["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)) >
     |<Aidp: ((("@")["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)(".")(["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*))>
     |<Aid: (("@")["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)>
     |<Taid: ((("@")["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)(".")(["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)(".")(["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*))>
     |<Ruta: (("c:")(("\\\\")["a"-"z"](["a"-"z"]|"_"|["0"-"9"])*)*(".usac")) >
     |<RutaZ: (("\"")("c:")(("\\\\")["a"-"z"](["a"-"z"]|"_"|["0"-"9"])*)*(".zip")("\"")) >
     |<RutaU: (("\"")("c:")(("\\\\")["a"-"z"](["a"-"z"]|"_"|["0"-"9"])*)*(".udmp")("\"")) >
     |<Bo: (("0"|"1"))>
     |<Num: ((["0"-"9"])+)>
     |<Dou: ((["0"-"9"])+("."(["0"-"9"])+))>
     |<Date: (("'")((("0")?["1"-"9"])|(["1"-"3"]["0"-"9"]))("-")((("0")?["1"-"9"])|(["1"]["0"-"2"]))("-")["1"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]("'"))>
     |<Datetime: (("'")((("0")?["1"-"9"])|(["1"-"3"]["0"-"9"]))("-")((("0")?["1"-"9"])|(["1"]["0"-"2"]))("-")["1"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]" "["0"-"9"]["0"-"9"]":"["0"-"9"]["0"-"9"]":"["0"-"9"]["0"-"9"]("'"))> 
}

TOKEN:
{
     <Suma: "+" >
    | <Resta: "-" >
    | <Divi: "/">
    | <Mult: "*">
    | <Pote: "^">
    | <Iguales:"==">
    | <Dife:"!=">
    | <Menorq :">">
    | <Mayorq :"<">
    | <Menori :"<=">
    | <Mayori :">=">
    | <And : "&&">
    | <Or  : "||">
    | <Not : "!">
    | <Simbolo:"%">
}

TOKEN :
{
      <Pai: "(">
    | <Paf: ")">
    | <Pt: ";">
    | <Cm: ",">
    | <Lli: "{">
    | <Llf: "}">
    | <Igual : "=">
    | <Pp : ":">
    | <Cii : "<<">
    | <Cif : ">>">
    | <punto: ".">
}

TOKEN :
{
     < Texto:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN:
{
    <Comilla: "\"">
}

//*********************************************************************************************INICIO

Nodo inicio(Nodo raiz):
{ }
{
    <Simbolo> raiz=instrucciones(raiz) <Simbolo> <EOF> { return raiz; }
}

Nodo instrucciones(Nodo raiz):
{}
{
      raiz=crear(raiz) raiz=instrucciones(raiz) { return raiz; }

    | raiz=usar(raiz)  raiz=instrucciones(raiz){ return raiz; }

    | <Alterar>  raiz=alterar(raiz)  raiz=instrucciones(raiz) { return raiz; }

    | <Eliminar> eliminar() raiz=instrucciones(raiz) { return raiz; }

    | <Insertar> insertar() raiz=instrucciones(raiz) { return raiz; }

    | <BackupU>  backupu() raiz=instrucciones(raiz) { return raiz; }

    | <BackupC>  backupc() raiz=instrucciones(raiz) { return raiz; }

    | <RestaU>   restau() raiz=instrucciones(raiz) { return raiz; }

    | <RestaC>   restac() raiz=instrucciones(raiz) { return raiz; }

    | <Actualizar> <Tabla> actualizar() raiz=instrucciones(raiz) { return raiz; }

    | <Borrar> <En> <Tabla> borrar() raiz=instrucciones(raiz) { return raiz; }

    | <Seleccionar> seleccionar() pt() raiz=instrucciones(raiz) { return raiz; }

    | <Contar> contar() raiz=instrucciones(raiz) { return raiz; }

    | <Otorgar> otorgar() raiz=instrucciones(raiz) { return raiz; }

    | <Denegar> denegar() raiz=instrucciones(raiz) {  return raiz; }

    | { return raiz; }
}

//*********************************************************************************Instruccion CREAR

Nodo crear(Nodo raiz):
{
    Nodo nodo1;
}
{
    <Crear> { Nodo tmp = new Nodo("crear");
              tmp.setNumNodo(grausu.contador++);
              tmp.setValor("");
              nodo1 = tmp; } 
    nodo1=tipocrear(nodo1) { raiz.addHijo(nodo1); return raiz; } 
}

/*
 <BaseD> crearbase() 
|<Tabla> creartabla()
|<Objeto> crearobjeto()
|<Procedimiento> crearproce()
|<Funcion> crearfuncion()
|<Usuario> crearusuario()
*/

Nodo tipocrear(Nodo hijo):
{
    Nodo nodo1;
}
{
     <BaseD> { hijo.setNombre("crear base"); } 
     hijo=crearbase(hijo) {return hijo; }

    |<Tabla> { hijo.setNombre("crear tabla"); } 
     hijo=creartabla(hijo) {return hijo; }

    |<Objeto> { hijo.setNombre("crear Objeto"); }
     hijo=crearobjeto(hijo) {return hijo; }

    |<Procedimiento> { hijo.setNombre("crear proce"); }
     hijo=crearproce(hijo) {return hijo; }

    |<Funcion> { hijo.setNombre("crear funcion"); }
     hijo=crearproce(hijo) {return hijo; }


    |<Usuario> { hijo.setNombre("crear usuario"); } 
     hijo=crearusuario(hijo) { return hijo; }
}

Nodo crearbase(Nodo hijo):{
    Nodo nodo1;
    Token t1;
}{
    t1=<Id> { Nodo tmp = new Nodo(t1.image);
              tmp.setNumNodo(grausu.contador++);
              tmp.setColumna(t1.beginColumn);
              tmp.setFila(t1.beginLine);
              nodo1 = tmp; } 
    pt() { hijo.addHijo(nodo1); 
           return hijo; }
}

Nodo creartabla(Nodo hijo):
{   
    Token t1;
}{
    t1=<Id> { hijo.setValor(t1.image);
              hijo.setColumna(t1.beginColumn);
              hijo.setFila(t1.beginLine);}
    <Pai> hijo=creaparametros(hijo)
     <Paf> pt() { return hijo; }
}


//t1=<Id> <Pai> creaparametros() <Paf> pt()
Nodo crearobjeto(Nodo hijo):
{ 
    Token t1;
}{
    t1=<Id> { hijo.setValor(t1.image);
              hijo.setColumna(t1.beginColumn);
              hijo.setFila(t1.beginLine);}
     <Pai> hijo=creaparametros(hijo) <Paf> pt() { return hijo; }
}

/*
tipodato() <Id> complemento()
| { return; }
*/
  
Nodo creaparametros(Nodo hijo):
{
  Token t1;
  Nodo nodo1;
}{
      nodo1=tipodato() 
      t1=<Id> { nodo1.setNombre(t1.image);
                nodo1.setColumna(t1.beginColumn);  
                nodo1.setFila(t1.beginLine); } 
      nodo1=complemento(nodo1) { hijo.addHijo(nodo1); }
      hijo=segparatro(hijo) { return hijo; }
 
    | { return hijo; }
}

/*

*/

Nodo segparatro(Nodo hijo):{

}
{
     <Cm> hijo=creaparametros(hijo) hijo=segparatro(hijo) {return hijo;}
    | { return hijo; }
}

Nodo complemento(Nodo primo):
{
    Nodo nodo1;
    Token t1; 
}
{
     t1=<Nulo> { Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp; 
                 primo.addHijo(nodo1);
    } primo=complemento(primo) { return primo; }


   | t1=<NoNulo> { Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp; 
                 primo.addHijo(nodo1);
    } primo=complemento(primo) { return primo; }

    | t1=<Unico> { Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp; 
                 primo.addHijo(nodo1);
    } primo=complemento(primo) { return primo; }

   | t1=<AutoI> { Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp; 
                 primo.addHijo(nodo1);
    } primo=complemento(primo) { return primo; }

   | t1=<LlaveP> { Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp; 
                 primo.addHijo(nodo1);
    } primo=complemento(primo) { return primo; }

   | t1=<LlaveF> { Nodo tmp = new Nodo(t1.image);
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setColumna(t1.beginColumn);
                 tmp.setFila(t1.beginLine);
                 nodo1 = tmp; 
                 
    }  t1=<Id> { nodo1.setValor(t1.image);}
       t1=<Id> { nodo1.setTipo(t1.image);
                 primo.addHijo(nodo1);}
    primo=complemento(primo) { return primo; }

   | { return primo; }
}

Nodo tipodato():
{
    Token t1;
}{
      t1=<Text> { Nodo tmp = new Nodo(t1.image);
                  tmp.setNumNodo(grausu.contador++);
                  tmp.setTipo("text"); 
                  return tmp; }

    | t1=<Integer> {  Nodo tmp = new Nodo(t1.image);
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setTipo("integer"); 
                      return tmp; }

    | t1=<Double> { Nodo tmp = new Nodo(t1.image);
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setTipo("double"); 
                      return tmp; }

    | t1=<Bool> { Nodo tmp = new Nodo(t1.image);
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setTipo("bool"); 
                      return tmp;  }

    | t1=<TDate> {  Nodo tmp = new Nodo(t1.image);
                      tmp.setNumNodo(grausu.contador++);
                      tmp.setTipo("tdate"); 
                      return tmp; }

    | t1=<TDateT> { Nodo tmp = new Nodo(t1.image);
                    tmp.setNumNodo(grausu.contador++);
                    tmp.setTipo("tdatet"); 
                    return tmp; } 

    | t1=<Id> { Nodo tmp = new Nodo(t1.image);
                tmp.setNumNodo(grausu.contador++);
                tmp.setTipo(t1.image); 
                return tmp; }
}
//*****************************************************************Crear Procedimiento

//<Id> <Pai> paraproce() <Paf> <Lli> proceconte() llf() 
Nodo crearproce(Nodo hijo):
{
    Token t1;
    Nodo nodo1;
}{
   t1=<Id> { hijo.setValor(t1.image);
             hijo.setColumna(t1.beginColumn);  
             hijo.setFila(t1.beginLine);
    } <Pai> { Nodo tmp = new Nodo("parametros");
              tmp.setNumNodo(grausu.contador++);
              nodo1 = tmp;
    } nodo1=paraproce(nodo1) { hijo.addHijo(nodo1); 
    } <Paf>{ Nodo tmp1 = new Nodo("sentencias");
             tmp1.setNumNodo(grausu.contador++);
             nodo1 = tmp1;
    }<Lli> nodo1=proceconte(nodo1) { hijo.addHijo(nodo1); 
    } llf() { return hijo; } 
}

Nodo paraproce(Nodo primo):
{
   Nodo nodo1;
   Token t1;
}
{
      nodo1=tipodato() t1=<Aid> { nodo1.setNombre(t1.image);
                                  nodo1.setColumna(t1.beginColumn);  
                                  nodo1.setFila(t1.beginLine);
                                  primo.addHijo(nodo1);
    } primo=cmproce(primo) { return primo; }
    | { return primo; }
}

Nodo cmproce(Nodo primo):
{}
{
       <Cm> primo=paraproce(primo) { return primo; }
    | { return primo; }
}

Nodo proceconte(Nodo padre):
{

}
{
     <Alterar>  padre=alterar(padre) padre=proceconte(padre) { return padre; }
     <Eliminar> eliminar() padre=proceconte(padre) { return padre; }
    | <Insertar> insertar() padre=proceconte(padre) { return padre; }
    | <BackupU>  backupu() padre=proceconte(padre) { return padre; }
    | <BackupC>  backupc() padre=proceconte(padre) { return padre; }
    | <RestaU>   restau() padre=proceconte(padre) { return padre; }
    | <RestaC>   restac() padre=proceconte(padre) { return padre; }
    | <Actualizar> <Tabla> actualizar() padre=proceconte(padre) { return padre; }
    | <Borrar> <En> <Tabla> borrar() padre=proceconte(padre) { return padre; }
    | <Seleccionar> seleccionar() pt() padre=proceconte(padre) { return padre; }
    | <Otorgar> otorgar() padre=proceconte(padre) { return padre; }
    | <Denegar> denegar() padre=proceconte(padre) { return padre; }
    | llamadafuncion() pt() padre=proceconte(padre) { return padre; }
    | llamadametodo() pt() padre=proceconte(padre) { return padre; }
    | <Declarar> declarar() pt() padre=proceconte(padre) { return padre; }
    | <Retorno> retorno() pt() padre=proceconte(padre) { return padre; }
    | <Si> si() padre=proceconte(padre) { return padre; }
    | <Selec> selecciona() padre=proceconte(padre) { return padre; }
    | <Para> para() padre=proceconte(padre) { return padre; }
    | <Mientras> mientras() padre=proceconte(padre) { return padre; }
    | <Imprimir> imprimir() padre=proceconte(padre) { return padre; }
    | <Detener> detener() padre=proceconte(padre) { return padre; }
    | <Contar> contar() padre=proceconte(padre) { return padre; }
    | { return padre; }
}

void llamadafuncion():
{}
{
     <Aid>  <Igual> s0()
    |<Aidp> <Igual> s0()
}

void llamadametodo():
{}
{
   <Id> <Pai> tipo() listavalores() <Paf>
}

void declarar():
{}
{
     <Aid> listavariable() tipodato() expresion()
}

void expresion():
{}{
      <Igual> s0()
    |{ return; }
}

void listavariable():
{}
{
      <Cm> <Aid> listavariable()
    | {return;}
}

void pt():
{}
{
	try{
		<Pt>
	}catch(ParseException x){
		System.out.println(x.toString());
		Token t;
		do {
			t = getNextToken();
	} while (t.kind != Pt); 
	}
}

void llf():
{}
{
	try{
		<Llf>
	}catch(ParseException x){
		System.out.println(x.toString());
		Token t;
		do {
			t = getNextToken();
	} while (t.kind != Llf); 
	}
}
//************************************************************************************Usuario
Nodo crearusuario(Nodo hijo):
{
    Nodo nodo1;
    Token t1;
}{
    t1=<Id>{ Nodo tmp = new Nodo(t1.image);
             tmp.setNumNodo(grausu.contador++);
             tmp.setColumna(t1.beginColumn);
             tmp.setFila(t1.beginLine);
             nodo1 = tmp; }
    <Colocar> <Pass> <Igual> 
    t1=<Texto> { nodo1.setValor(t1.image);}
    pt() {  hijo.addHijo(nodo1);
            return hijo;} 
}

//**************************************************************************INSTRUCCION USAR

Nodo usar(Nodo raiz):
{
    Nodo nodo1;
    Token t1;
}
{
    <Usar> t1=<Id> { Nodo tmp = new Nodo("usar");
                     tmp.setNumNodo(grausu.contador++);
                     tmp.setValor(t1.image);
                     tmp.setColumna(t1.beginColumn);
                     tmp.setFila(t1.beginLine);
                     nodo1 = tmp; }
    pt() { raiz.addHijo(nodo1); return raiz; }
}
//**************************************************************************RETORNO

void retorno():
{}
{
    s0()
}

//****************************************************************************INSTRUCCION ALTERAR
/*
<Tabla> Nodo <Id> tablaalt()
|<Objeto> <Id> objalt()
|<Usuario> <Id> usualt()
*/

Nodo alterar(Nodo raiz):
{
    Nodo nodo1;
    Token t1;
}
{
     <Tabla> { Nodo tmp = new Nodo("alterar tabla");
               tmp.setNumNodo(grausu.contador++);
               tmp.setValor("");
               nodo1 = tmp; } 
    t1=<Id> { nodo1.setValor(t1.image);
              nodo1.setColumna(t1.beginColumn);  
              nodo1.setFila(t1.beginLine);
    } nodo1=tablaalt(nodo1) 
        { raiz.addHijo(nodo1);
          return raiz; }

    |<Objeto>  { Nodo tmp = new Nodo("alterar objeto");
                 tmp.setNumNodo(grausu.contador++);
                 tmp.setValor("");
                 nodo1 = tmp; 
    } t1=<Id> { nodo1.setValor(t1.image);
              nodo1.setColumna(t1.beginColumn);  
              nodo1.setFila(t1.beginLine);
    } nodo1=objalt(nodo1) { raiz.addHijo(nodo1);
                 return raiz; }

    |<Usuario> <Id> usualt()
}
//<Pai> tipodato() <Id> compoalt() setablaalt() <Paf> pt()
Nodo tablaalt(Nodo hijo):
{ 
     Nodo nodo1;
    Token t1;
}
{
      <Agregar> { hijo.setNombre("alterar_t_agr"); 
    } <Pai> hijo=creaparametros(hijo) <Paf>
      pt() { return hijo; }

    | <Quitar> { hijo.setNombre("alterar_t_quit"); 
    } t1=<Id> { Nodo tmp = new Nodo(t1.image);
                tmp.setNumNodo(grausu.contador++);
                tmp.setColumna(t1.beginColumn);
                tmp.setFila(t1.beginLine);
                nodo1 = tmp; hijo.addHijo(nodo1);
      } hijo=quitarseg(hijo) pt() { return hijo; }
}

Nodo quitarseg(Nodo hijo):
{
    Token t1;
    Nodo nodo1;
}
{
      <Cm> t1=<Id> { Nodo tmp = new Nodo(t1.image);
                    tmp.setNumNodo(grausu.contador++);
                    tmp.setColumna(t1.beginColumn);
                    tmp.setFila(t1.beginLine);
                    nodo1 = tmp; hijo.addHijo(nodo1);
      } hijo=quitarseg(hijo) { return hijo; }
    | { return hijo; }
}

Nodo objalt(Nodo hijo):
{ 
    Nodo nodo1;
    Token t1;
}
{
      <Agregar> { hijo.setNombre("alterar_ob_agr"); 
    } <Pai> hijo=creaparametros(hijo) <Paf>
      pt() { return hijo; }

    | <Quitar> { hijo.setNombre("alterar_ob_quit"); 
    } t1=<Id> { Nodo tmp = new Nodo(t1.image);
                tmp.setNumNodo(grausu.contador++);
                tmp.setColumna(t1.beginColumn);
                tmp.setFila(t1.beginLine);
                nodo1 = tmp; hijo.addHijo(nodo1);
      } hijo=quitarseg(hijo) pt() { return hijo; }
}

void usualt():
{}{
    <Cambiar> <Pass> <Igual> <Texto> pt()
}

//*****************************************************************************Instruccion Eliminar

void eliminar():
{}
{
      <Tabla> <Id> pt()
    | <BaseD> <Id> pt()
    | <Objeto> <Id> pt()
    | <Usuario> <Id> pt()
}

//*******************************************************************************Instruccion insertar

void insertar():
{}
{
    <En> <Tabla> <Id> <Pai> tipo() listavalores() <Paf> especial() pt()
}

void listavalores():
{ }
{
       <Cm> tipo() listavalores()
    | { return;}
}

void tipo():
{}
{
      <Id>
    |<Idp>
    |<Aidp>
    |<Aid>
    |<Bo>
    |<Num>
    |<Dou>
    |<Texto>
    |<Date>
    |<Datetime>
}

void especial():
{}
{
    <Valores> <Pai> tipo() listavalores() <Paf>
    | {return; }
}
//***********************************************************************BACKUP y Restaurar

void backupu():
{}
{
    <Id> <Id> pt()
}

void backupc():
{}
{
    <Id> <Id> pt()
}

void restau():
{}
{
     <RutaU> pt()
}

void restac():
{}
{
    <RutaZ> pt()
}

//************************************************************************** Instruccion ACTUALIZAR

void actualizar():
{}
{
    <Id> <Pai> tipoac() listavaloresac() <Paf> especialac() where() pt() 
}

void listavaloresac():
{ }
{
       <Cm> tipoac() listavaloresac()
    | { return;}
}

void tipoac():
{}
{
      <Id>
    | <Idp>
    | <Aidp>
    | <Aid>
    |<Bo>
    |<Num>
    |<Dou>
    |<Texto>
    |<Date>
    |<Datetime>
}

void especialac():
{}
{
    <Valores> <Pai> s0() <Paf>
    | {return; }
} 

void livalores():
{}{
     <Cm> s0()  livalores()
    | {return; }
}

void where():
{ }
{
     <Donde> s0()
    | {return; }
}

//************************************************************************ INSTRUCCION BORRAR

void borrar():
{}
{
    <Id> where() pt()
}
//************************************************************************ INSTRUCCION SELECCIONAR

void seleccionar():
{}
{
       <Id> listids() <De> <Id> listids() where() orden() 
    | <Mult> <De> <Id> listids() where() orden() 
}


void orden():{
}{
      <OrdenP> idorden() tipoorden() 
    | {return;}
}

void idorden():
{}{
       <Id>
    | <Idp>
}

void listids():{
}{    
     <Cm> <Id> listids()
    |{return;}
}

void tipoorden():{
}{
      <Asc>
    | <Desc>
}
//************************************************************************ operaciones

void s0():
{}{
     <Not> s1()
    | s1()
}

void s1():
{}{
   s2()(( <And> ) s2())*
}

void s2():
{}{
   s3()(( <Or> ) s3())*
}

void s3():
{}{
    s4()(( <Iguales> | <Dife> | <Mayorq> | <Menorq> | <Mayori> | <Menori> ) s4())*
}

void s4():
{}{
    s5()(( <Suma> | <Resta> ) s5())*
}

void s5():
{}{
    s6()(( <Divi> | <Mult> ) s6())*
}

void s6():
{}{
    s7() (( <Pote> ) s7())*
}

void s7():
{}{
     <Resta> s8()
    | s8()
}

void s8():
{}{
      <Num>
    | <Bo>
    | <Dou>
    | <Texto>
    | <Id> fun()
    | <Idp>
    | <Tid>
    | <Aid>
    | <Aidp>
    | <Taid>
    | <Fecha>
    | <FechaH>
    | <Datetime>
    | <Date>
    | <Pai> s0() <Paf>
}

void fun():
{}
{
    <Pai> funpara() s9() <Paf>
    |{return;}
}

void funpara():{
}{
       s0()
    | {return;}
}

void s9():
{}
{
    <Cm> s0() s9()
    | {return;}
}

//*************************************************************************************OTORGAR y DENEGAR

void otorgar():
{}
{
    <Id> <Cm> objetopermiso() pt()
}

void denegar():
{}
{
    <Id> <Cm> objetopermiso() pt()
}

void objetopermiso():
{}
{
     <Idp>
    |<Id> <punto> <Mult>
}

//**********************************************************************************Funcion SI()

void si():
{
    Nodo nodo1;
}
{
    <Pai> s0() <Paf> <Lli> proceconte(null) llf() sino()
}

void sino():
{}
{
      <Sino> <Lli>  proceconte(null) llf()
    | { return; }
}

//*******************************************************************SELECCIONA

void selecciona():
{}
{
    <Pai> s0() <Paf> <Lli> caso() llf()
}

void caso():
{}
{
    <Caso> puntual() <Pp> proceconte(null) caso2()
}

void puntual():
{}
{
      <Texto>
    | <Bo>
    | <Num>
}

void caso2():
{}
{
      <Caso> puntual() <Pp> proceconte(null) caso2()
    | <Defecto> <Pp> proceconte(null) caso2()
    | {return;}
}

//*****************************************************************************Instruccion Para

void para():
{}
{
    <Pai> pinterno() <Paf> <Lli> proceconte(null) llf()
}

void pinterno():
{}{
     <Declarar> <Aid> <Igual> s0() pt() s0() pt() incremento() 
}

void incremento():
{}{
      <Suma> <Suma>
    | <Resta> <Resta>
}

//*******************************************************************************Detener()

void detener():
{}
{
    pt()
}

//*******************************************************************************Mientras

void mientras():
{}
{
    <Pai> s0() <Paf> <Lli> proceconte(null) llf()
}

//*******************************************************************************Imprimir

void imprimir():
{}
{
    <Pai> s0() <Paf> pt()
}

//******************************************************************************CONTAR

void contar():
{}
{
    <Pai> <Cii> <Seleccionar> seleccionar() <Cif> <Paf> pt()
}