/* graxmlTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. graxmlTokenManager.java */
package gramatica_xml;
import pr1compilarodores2.Nodo;
import java.io.*;
import java.util.*;

/** Token Manager. */
@SuppressWarnings("unused")public class graxmlTokenManager implements graxmlConstants {
     Token tok;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 47:
         return jjStopAtPos(0, 86);
      case 60:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0xffffffffffffffc0L, 0x1fffL);
      case 62:
         return jjStopAtPos(0, 85);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0xaaaaaaaaaaaaaa80L, active1, 0x114L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x15004000000000L, active1, 0x420L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x1440000040L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x82L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000400L, active1, 0x1200L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000010000100000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000500001001000L, active1, 0x40L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x54000L, active1, 0x8L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4400000L, active1, 0x1L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2a109400401100L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000010200100040L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x2880000080L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000004004000L, active1, 0x8L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x104L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000010000800L, active1, 0x1800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8500020140250400L, active1, 0x1L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000a00002002000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x154400010a8000L, active1, 0x30L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40080000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x4008800000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x602L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(3, 6);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(3, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(3, 71);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x202800802200L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000020000600080L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x20L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000008008100L, active1, 0x10L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000100000L, active1, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000020000000L, active1, 0x2L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0xa044003810a0800L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x102a980002000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x100d410001000L, active1, 0x408L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4050000040000000L, active1, 0x1004L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x50000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(4, 7);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(4, 18);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(4, 28);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(4, 40);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(4, 42);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(4, 54);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(4, 65);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(4, 72);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1100000000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000040800400L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x480001000000L, active1, 0x800L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x400001400100200L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0x20L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000200000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x100400000L, active1, 0x1000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000800L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0x4L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8800202000000L, active1, 0x609L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000204000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x4010000000010100L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x10200a824002000L, active1, 0x10L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x80a0000080000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(5, 12);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(5, 16);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(5, 19);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 26);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(5, 29);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(5, 32);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(5, 34);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(5, 38);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(5, 41);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(5, 43);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(5, 46);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(5, 55);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(5, 66);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(5, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(5, 74);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x102200000400000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x9000080000800L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x800002100000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x800002801200000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000008000L, active1, 0x20L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x240800000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000100000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1810L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x400008000000400L, active1, 0x8L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x8020000000024200L, active1, 0x1L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x200001008000100L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x4010000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(6, 13);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(6, 17);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(6, 22);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 27);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(6, 33);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(6, 35);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(6, 39);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(6, 47);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(6, 50);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(6, 52);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(6, 56);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(6, 58);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(6, 62);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(6, 64);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(6, 75);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(6, 76);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000800000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x42000400L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000001000000000L, active1, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000080000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000900L, active1, 0x10L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000100000008000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000104200L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8020000000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(7, 10);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(7, 20);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(7, 23);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(7, 30);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(7, 44);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(7, 51);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(7, 53);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(7, 57);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(7, 59);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(7, 63);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000800L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000100L, active1, 0x28L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x4200L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000200000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x208000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(8, 8);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(8, 11);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(8, 21);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(8, 31);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(8, 45);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(8, 48);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(8, 60);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(8, 67);
         break;
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000004200L, active1, 0x10L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x1008000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(9, 9);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(9, 14);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(9, 36);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(9, 49);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(9, 61);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(9, 68);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x2001000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(10, 15);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(10, 24);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(10, 37);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(11, 25);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa15_0(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa17_0(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1);
      return 18;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1);
      return 19;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa20_0(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1);
}
private int jjMoveStringLiteralDfa20_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1);
      return 20;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa21_0(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1);
}
private int jjMoveStringLiteralDfa21_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(19, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1);
      return 21;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1);
}
private int jjMoveStringLiteralDfa22_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(20, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1);
      return 22;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(22, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 78;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     { jjCheckNAddTwoStates(17, 18); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 5); }
                  else if (curChar == 37)
                     { jjCheckNAddStates(6, 8); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 58)
                     { jjCheckNAddTwoStates(8, 14); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 14:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if ((0x3000000000000L & l) != 0L && kind > 80)
                     kind = 80;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 18:
                  if (curChar == 46)
                     { jjCheckNAdd(19); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAdd(19); }
                  break;
               case 20:
                  if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 21:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 23:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 24:
                  if (curChar == 34 && kind > 87)
                     kind = 87;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 27:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(26); }
                  break;
               case 29:
                  if (curChar == 37)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 30:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 32:
                  if ((0xa000000000L & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 33:
                  if (curChar == 37 && kind > 88)
                     kind = 88;
                  break;
               case 34:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(19, 22); }
                  break;
               case 35:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 36:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(35); }
                  break;
               case 38:
                  if (curChar == 39)
                     { jjCheckNAddStates(0, 5); }
                  break;
               case 39:
                  if (curChar == 48)
                     { jjCheckNAdd(40); }
                  break;
               case 40:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 41:
                  if (curChar == 45)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 42:
                  if (curChar == 48)
                     { jjCheckNAdd(43); }
                  break;
               case 43:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(44); }
                  break;
               case 44:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if (curChar == 39 && kind > 82)
                     kind = 82;
                  break;
               case 50:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x7000000000000L & l) != 0L)
                     { jjCheckNAdd(44); }
                  break;
               case 52:
                  if ((0xe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 54:
                  if (curChar == 48)
                     { jjCheckNAdd(55); }
                  break;
               case 55:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(56); }
                  break;
               case 56:
                  if (curChar == 45)
                     { jjCheckNAddStates(26, 28); }
                  break;
               case 57:
                  if (curChar == 48)
                     { jjCheckNAdd(58); }
                  break;
               case 58:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(59); }
                  break;
               case 59:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if (curChar == 39 && kind > 83)
                     kind = 83;
                  break;
               case 74:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x7000000000000L & l) != 0L)
                     { jjCheckNAdd(59); }
                  break;
               case 76:
                  if ((0xe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(56); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     { jjCheckNAdd(1); }
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAdd(4); }
                  break;
               case 6:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 8:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 10:
                  if ((0x800000008L & l) != 0L && kind > 79)
                     kind = 79;
                  break;
               case 11:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 21:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 22:
                  if (curChar == 92)
                     { jjAddStates(29, 31); }
                  break;
               case 23:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 30:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 31:
                  if (curChar == 92)
                     { jjAddStates(32, 34); }
                  break;
               case 32:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 21:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(9, 11); }
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(6, 8); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 78 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   39, 40, 52, 54, 55, 76, 30, 31, 33, 21, 22, 24, 8, 9, 14, 21, 
   22, 26, 24, 30, 31, 35, 33, 42, 43, 50, 57, 58, 74, 23, 25, 27, 
   32, 34, 36, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\74", "\76", "\57", null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public graxmlTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public graxmlTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 78; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0x1ffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[78];
    private final int[] jjstateSet = new int[2 * 78];

    
    protected char curChar;
}
