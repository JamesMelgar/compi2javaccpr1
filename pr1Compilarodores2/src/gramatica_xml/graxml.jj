options{
STATIC = false;
DEBUG_LOOKAHEAD = false;
IGNORE_CASE = true;
}

PARSER_BEGIN(graxml)

package gramatica_xml;
import pr1compilarodores2.Nodo;
import java.io.*;
import java.util.*;

public class graxml
{
    public static int contador = 1;
    public static void main( String[] args )throws ParseException
	{
                System.out.println("analisis correcto");
	}
}
PARSER_END(graxml)


TOKEN_MGR_DECLS : {
     Token tok;
}
SKIP : 
{ 
	" "|"\n" | "\r" | "\r\n" | "\t"
}

TOKEN :
{
      < Dbi: "<DB>" >
    | < Dbf: "</DB>" >
    | < tgmi: "<maestro>" >
    | < tgmf: "</maestro>" >
    | < Nombrei: "<nombre>" >
    | < Nombref: "</nombre>" >
    | < Pathi: "<path>" >
    | < Pathf: "</path>" >
    | < Registroi: "<registro>">
    | < Registrof: "</registro>">
    | < Rowsi: "<rows>">
    | < Rowsf: "</rows>">
    | < Rowi: "<row>">
    | < Rowf: "</row>">
    | < Objecti: "<object>">
    | < Objectf: "</object>">
    | < Tablai: "<tabla>">
    | < Tablaf: "</tabla>">
    | < Procedurei: "<procedure>">
    | < Proceduref: "</procedure>">
    | < Texti: "<text>">
    | < Textf: "</text>">
    | < Inti: "<int>">
    | < Intf: "</int>">
    | < Doublei: "<Doublei>">
    | < Doublef: "</Doublef>">
    | < Booli: "<bool>">
    | < Boolf: "</bool>">
    | < Datei: "<date>">
    | < Datef: "</date>">
    | < Dateti: "<datetime>">
    | < Datetf: "</datetime>">
    | < Attri: "<attr>">
    | < Attrf: "</attr>">
    | < Obji: "<obj>">
    | < Objf: "</obj>">
    | < Srci: "<src>">
    | < Srcf: "</src>">
    | < Paramsi: "<params>">
    | < Paramsf: "</params>">
    | < Proci: "<proc>">
    | < Procf: "</proc>">
    | < Artablai: "<artabla>" >
    |  < Artablaf: "</artabla>">
    | < Arobji: "<arobj>" >
    | < Arobjf: "</arobj>">
    | <  Arusui :"<arusu>">
    | < Arusuf :"</arusu>">
    | <  Usui :"<usu>">
    | < Usuf:"</usu>">
    | < Contai:"<conta>">
    | < Contaf:"</conta>">
    | < Noperi:"<noper>">
    | < Noperf:"</noper>">
    | < Permisoi:"<permiso>">
    | < Permisof:"</permiso>">
    | < Obusui:"<Obusu>">
    | < Obusuf:"</Obusu>">
    | < Todos:"<todos>">
}

TOKEN :
{
    <Pk: "<pk>" >
    |<Fki: "<fk>" >
    |<Fkf: "</fk>" >
    |<Nulo: "<nulo>" >
    |<Auto: "<auto>" >
    |<Unico: "<unico>" >
    |<Nnulo: "<nnulo>" >
}

TOKEN :
{
      <Id: (["a"-"z"](["a"-"z"]|("_")|["0"-"9"])*)>
     |<Ruta: (("c:")(("\\\\")["a"-"z"](["a"-"z"]|"_"|["0"-"9"])*)*(".usac")) >
     |<Num: ((["0"-"9"])+("."(["0"-"9"])+)?)>
     |<Date: (((("0")?["1"-"9"])|(["1"-"3"]["0"-"9"]))("-")((("0")?["1"-"9"])|(["1"]["0"-"2"]))("-")["1"-"9"]["0"-"9"]["0"-"9"]["0"-"9"])>
     |<Datetime: (((("0")?["1"-"9"])|(["1"-"3"]["0"-"9"]))("-")((("0")?["1"-"9"])|(["1"]["0"-"2"]))("-")["1"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]" "["0"-"9"]["0"-"9"]":"["0"-"9"]["0"-"9"]":"["0"-"9"]["0"-"9"])> 
}

TOKEN :
{
      <Ai: "<">
    | <Af: ">">
    | <D: "/">
}

TOKEN :
{
     < Texto:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

//*********************************************************************************************Inicio

Nodo inicio(Nodo raiz) :
{

}
{
	raiz=interno(raiz) { return raiz; }<EOF>
}

Nodo interno(Nodo raiz):
{ 
    Nodo nodo1;
}
{
    raiz=tabmaestro(raiz) { return raiz; } 
   |registro()
   |archivotabla()
   |archivoobj()
   |raiz=arusu(raiz) {return raiz;}
}

//******************************************************************************************ARCHIVO MAESTRO

Nodo tabmaestro(Nodo raiz):
{ }
{
    <tgmi>    { Nodo tmp = new Nodo("Maestro");
                tmp.setNumNodo(graxml.contador++);
                raiz = tmp; }
    raiz=maestro(raiz) <tgmf> {return raiz;}
}

//<Dbi> Manombre() <Dbf> Masig()
Nodo maestro(Nodo raiz):
{
    Nodo nodo1;
}
{
    <Dbi> raiz=Manombre(raiz) <Dbf> raiz=Masig(raiz) { return raiz; }
}


Nodo Manombre(Nodo raiz) :
{
    Token t1;
    Nodo nodo1;
}
{
    <Nombrei> t1=<Id> { Nodo tmp = new Nodo(t1.image);
                        tmp.setNumNodo(graxml.contador++);
                        tmp.setColumna(t1.beginColumn);
                        tmp.setFila(t1.beginLine);
                        tmp.setValor("0");
                        nodo1 = tmp; }
    <Nombref> nodo1=Maruta(nodo1) { raiz.addHijo(nodo1);
                                    return raiz; }
}

Nodo Maruta(Nodo hermano):
{
    Token t1;
}
{
    <Pathi> t1=<Ruta> { hermano.setValor(t1.image); }
    <Pathf> { return hermano; }
}

Nodo Masig(Nodo raiz):
{}
{
      raiz=maestro(raiz) { return raiz; }
    | { return raiz; }
}

//*********************Archivo registro

void registro():
{}
{
    <Registroi> recontenido() <Registrof>
}

void recontenido():
{
    Nodo nodo1;
}{
      <Procedurei> nodo1=Maruta(null) <Proceduref> recontenido()
    | <Objecti> nodo1=Maruta(null) <Objectf> recontenido()
    | <Tablai> tabla() <Tablaf>  recontenido()
    | { return; }
}

void tabla():
{}{
    <Nombrei> <Id> <Nombref> <Pathi> <Ruta> <Pathf> <Rowsi> tbcont() <Rowsf>
}

void tbcont():
{ }{
    <Inti> <Id> <Intf> complemento() tbcont()
   |<Texti> <Id> <Textf> complemento() tbcont()
   |<Doublei> <Id> <Doublef> complemento() tbcont()
   |<Booli> <Id> <Boolf> complemento() tbcont()
   |<Datei> <Id> <Datef> complemento() tbcont()
   |<Dateti> <Id> <Datetf> complemento()  tbcont()
   |<Obji> <Id> <Objf>
   | {return;}
}

void complemento():
{}{
     <Pk> complemento()
    | <Fki> <Id> <Fkf> complemento()
    | <Nulo> complemento()
    | <Nnulo> complemento()
    | <Auto> complemento()
    | <Unico> complemento()
    | {return; }
}

//**************************************************************************************** ARCHIVO TABLA

void archivotabla():
{}{
   <Artablai> conttabla() <Artablaf> 
}

void conttabla():{}{
    <Rowi> contcolumna() <Rowf> conttabla()
   | {return;}
}

void contcolumna():
{}
{
    <Ai> <Id> <Af> tipo() <Ai> <D> <Id> <Af> contcolumna()
   | <Obji> <Id> contcolumna() <Objf> contcolumna()
   | {return;}
}

void tipo():
{}
{
      <Id>
    |<Num>
    |<Texto>
    |<Date>
    |<Datetime>
}

//***************************************************************************************ARCHIVO OBJETO

void archivoobj():
{}
{
    <Arobji> obrows() <Arobjf>
}

void obrows():
{}
{
    <Obji> objcont() <Objf> obrows()
    | { return; }
}

void objcont():
{}
{
     <Nombrei> <Id> <Nombref> <Attri> tbcont() <Attrf> objcont()
   | { return; }
}

//*************************************************************************************** Archivo Usuarios

Nodo arusu(Nodo raiz):
{
    Nodo nodo1;
}
{
    <Arusui> {  Nodo tmp = new Nodo("Archivo");
                tmp.setNumNodo(graxml.contador++);
                raiz = tmp; }
    raiz=usucon(raiz) <Arusuf> { return raiz; }
}

Nodo usucon(Nodo raiz):
{
    Nodo nodo1;
}
{
    <Usui> {    Nodo tmp = new Nodo("Usuario");
                tmp.setNumNodo(graxml.contador++);
                nodo1 = tmp; }
    nodo1=datousu(nodo1) <Usuf> { raiz.addHijo(nodo1); }
    raiz=usucon(raiz) {return raiz;}
   | { return raiz; }
}

Nodo datousu(Nodo hijo):
{
    Nodo nodo1;
    Token t1;
}
{
      <Nombrei> t1=<Id> <Nombref> { Nodo tmp = new Nodo(t1.image);
                                    tmp.setNumNodo(graxml.contador++);
                                    tmp.setValor("0");
                                    hijo.addHijo(tmp);
                                  }  hijo=datousu(hijo) { return hijo; }
    | <Contai> t1=<Id> <Contaf>{ Nodo tmp = new Nodo(t1.image);
                                    tmp.setNumNodo(graxml.contador++);
                                    hijo.addHijo(tmp);
                                    tmp.setValor("0");
                                }   hijo=datousu(hijo) { return hijo; }
    | <Noperi> { Nodo tmp = new Nodo("Nopermiso");
                 tmp.setNumNodo(graxml.contador++);
                 tmp.setValor("0");
                 nodo1 = tmp;
                } 
     nodo1=noper(nodo1) <Noperf> { hijo.addHijo(nodo1);}
     hijo=datousu(hijo) { return hijo; }
    | <Permisoi> { Nodo tmp = new Nodo("Permiso");
                   tmp.setNumNodo(graxml.contador++);
                   tmp.setValor("0");
                   nodo1 = tmp;
                } 
    nodo1=per(nodo1) <Permisof> { hijo.addHijo(nodo1); }
    hijo=datousu(hijo) { return hijo; }
    | {return hijo; }
}

Nodo noper(Nodo hijo2):
{
    Token t1;
    Nodo nodo1;
}
{  //Base de datos
    <Dbi> t1=<Id> { Nodo tmp = new Nodo(t1.image);
                    tmp.setNumNodo(graxml.contador++);
                    tmp.setValor("0");
                    nodo1 = tmp;
                    }
    <Dbf> nodo1=connoper(nodo1)  {  hijo2.addHijo(nodo1);
                                    return hijo2; }
    | { return hijo2; }
}

Nodo connoper(Nodo hijo3):
{
    Token t1;
}{
    <Obusui> t1=<Id> { Nodo tmp = new Nodo(t1.image);
                       tmp.setNumNodo(graxml.contador++);
                       tmp.setValor("0");
                       hijo3.addHijo(tmp);
                    }
    <Obusuf> hijo3=connoper(hijo3) { return hijo3; }
   | { return hijo3; }
}

Nodo per(Nodo hijo2):
{
    Token t1;
    Nodo nodo1;
}
{
    <Dbi> t1=<Id> {  Nodo tmp = new Nodo(t1.image);
                     tmp.setNumNodo(graxml.contador++);
                     tmp.setValor("0");
                     nodo1 = tmp;
                  }
    <Dbf> nodo1=conper(nodo1) {  hijo2.addHijo(nodo1);
                                return hijo2; }
    | {return hijo2;}
}

Nodo conper(Nodo hijo3 ):
{
    Token t1;
}
{
     <Obusui> t1=<Id> { Nodo tmp = new Nodo(t1.image);
                       tmp.setNumNodo(graxml.contador++);
                       tmp.setValor("0");
                       hijo3.addHijo(tmp);
                      } 
      <Obusuf> hijo3=per(hijo3) { return hijo3; }
    | <Todos> {  Nodo tmp = new Nodo("Todos");
                 tmp.setNumNodo(graxml.contador++);
                 tmp.setValor("0");
                 hijo3.addHijo(tmp);
                 return hijo3;
              } 
    | {return hijo3;}
}

